<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lyan</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lyan.me/"/>
  <updated>2022-09-24T01:55:55.152Z</updated>
  <id>http://lyan.me/</id>
  
  <author>
    <name>lyan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>https密钥交换过程</title>
    <link href="http://lyan.me/2021/04/22/https%E5%AF%86%E9%92%A5%E4%BA%A4%E6%8D%A2%E8%BF%87%E7%A8%8B/"/>
    <id>http://lyan.me/2021/04/22/https密钥交换过程/</id>
    <published>2021-04-22T03:45:53.000Z</published>
    <updated>2022-09-24T01:55:55.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关键点"><a href="#关键点" class="headerlink" title="关键点"></a>关键点</h1><ul><li><p>使用 <strong>非对称加密</strong> 处理用于加密数据的密钥</p></li><li><p>使用 <strong>对称加密</strong> 处理具体的数据</p></li></ul><h1 id="图解"><a href="#图解" class="headerlink" title="图解"></a>图解</h1><p><a href="https://drive.google.com/file/d/14vRn_mfvbyN8-JSvktHqMN25kxAl4W_s/view" target="_blank" rel="noopener">流程图地址，按需自取</a></p><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" width="581px" height="710px" viewbox="-0.5 -0.5 581 710" content="&lt;mxfile host=&quot;app.diagrams.net&quot; modified=&quot;2021-04-22T03:28:40.734Z&quot; agent=&quot;5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.72 Safari/537.36&quot; etag=&quot;r0FVoIzRprTmziIPNl1Z&quot; version=&quot;14.6.5&quot; type=&quot;google&quot;&gt;&lt;diagram id=&quot;BLMGk-S4g4146bWGQgA-&quot; name=&quot;Page-1&quot;&gt;7Vxdl6I4Gv41OWfnojyEBAiXaFk9Z7d3z0zXnN3pS5SoTKM4gFXl/vpJIBESomILttXTdVPkk/B+Pu+bRIAm67cPWbhd/TuNaAJsK3oD6BHYNvRsn/3jNfuqxkFOVbHM4kh0qiue4/9TUWmJ2l0c0VzpWKRpUsRbtXKebjZ0Xih1YZalr2q3RZqob92GS9qqeJ6HSbv2f3FUrKpaYnt1/c80Xq7km6ErPngdys7iS/JVGKWvjSo0BWiSpWlRPa3fJjThxJN0qcY9HWk9LCyjm6LLgN/WD59//fLrM/ycf/jv9MNLjl7++SBmeQmTnfhgsdhiLymQpbtNRPkkFkDj11Vc0OdtOOetr4znrG5VrBNWguxxESfJJE3SrByLIoeSCLP6vMjSL7TRQuwZcl3W0v4MuSaaFfStUSU+6wNN17TI9qyLaHUEhYWIQV+UX2uGQVfUrRrMcj1RGQohWR6mrunIHgQpLyCrPSxZKWSE9Uxk9V0PhT2RFcMOdHVuSldkoKubFJxCKfvOJoHdP3epbHjIS7sSsA4Qb9/qRva05P8nSczpJOZiS6umqxpbrGP0K1T+qHzYpBuqMU1UhUm83LDinL2Nsvox50bMrE0gGtZxFPHXGAVCFZkeOAx1DrttDmMDg+2h+IsH4u8zzRhV/nb8xe6d8de9nr+2ib9gSkDwBMYemLpgDAGxt7tZEs//RfddmU43UcDxAudeEuZ5PFdFgHEh2/8ueFMWPvPCyJHFx7dm4+Nelt7i4nc5B3tujGKlehAvyDFRmK9KOYCn5CBPd9mcnqA2EXgpzJa0OAUChFmlkYKFjorVgzWyHMdtiZLJF8i6jCZhEb+oqMokX+Ktv6RxKRBSzi1Vkm1XE9GKGGJUEwXpE2lg4QA05UQVtU5MJDumi0VOlT6lShzI9fVaQtpaMnUAeQI+5II+dkpB1yX+BMKAFyOMxWJhz+cmhBG5M9fpCWFo5sm2DADDZJ905vdmn6QwnAJu5wxFRTEZLNinKHVW4W6lXGacd7FuqfMQnU1HVKsvtYFt1P1bvKas5mPMvHOLj4z4H8MZi1cV9nV34RllbimclfNxq73lH1Z+qjMGzqPwXSKkZTZWlMUKDPHbaZHUteoQ84olgGZYecRsy+D7awVmeNsHDRCfGb8AA4LB1ANMNolrMH7cLjIDiXlnfwz8aWky2cAJmPrAt0HAXG7QQAXXGMs+oJndwfahEzrfv+07Ds7ybbjpDs4q8GrNwvmXZUnWh3nlPniXbDn7h40J72WzdVo29utnx/rJjO1U1pqwXbXEa7HdoXAZtuOACHoKwCOeBHxmiMcLv9CM2afSyvQJ+6QKncd9/l25IaT5D6SHIV39ENJxhZ6PGNoR+edRxDXpn28DzkzZHxM4g4OhM9uQrWTGPQgAmQiXQKDB7nO7wdwGKb0FAr7DH4gFAq/Flu8m9O/CPWjg3mChv+2cVwpuiCQ+SrNilS7TTZhM61qNTnWfj2m6FQz7gxbFXqCucFekKjt7srF2Vxtr4442trPxvI4LPWRQLXMGBoPxI3fUHKRhEJBJ0Ek5u6ZnkiTe5sfUp19sRo74oYbu+AbVQYOpjnd/qlOnw0bY8RTYdA408ZIOfa7QRNxVE9370sR2luezkasDx6htyp+WwT7CUAwhuQ4yDh+ISm2+J6W7hZZ0jQluoyWoDfn+c8dagvpM1mDs2oojgveuM7Zh/45Bbb/0/hUKD1wDHG8FR6t0Pdvl38TZe92c/WBpGNuUhtHo8w7CRWygozlc1Ddg+qOkIQxn4HQ8Bj4qxfIR+E9tY9IVaLaoTN0jVPb8mdVTWHcAmVJcXW/ktAjtOQaBdYYy0baRzCwGYNTlgTbh6s7xfsD3sDjhJ2AclFndpzKZW+dns3ATpWtTfva7CcxxBz0htwzMkSkwP5P31RK6bGkihdt4+gnITHAZQC7CdZzsqzFsonC9LRsR4sfDVjR5oZwprRZ1Ej0KVdqqVfLGTZqtw0RtfhW05O24WmfZmDD4RbMH9qnzeLM0juey9yDEiDcLSVKaYyYlGzF9c2llY8HkOl+wSeX0fDtKdHhNs0h9u9VDEl0Mj+J8m4SC6vEmiRsvXiRpWDQXdD6krxPvPI4PQGAdtLjWXFYzngLfK/sQMGZ9nsB4wtVfiNUsk6+gm3m23xafarXXe3RN8V+22a3ty/Wg1p6m1qZ8m21Q68GSpciUNLiL7ZzDUQafJ2EJPCYEve3qvJ8TO9IWnw3TpBe5l60bxxv5rlX/YVUbXDjyiDpp50MFmsN0CBnJLOaN9nNwB0h+61SAbsLUUyfXSaGk+HkpdDpK4W2SBXLdg51mDylZGCG+Oyd0tugJIGonAxA2uBLTyQA4WAIaGyB+b+c2ybQ8yFF5hQaOeFeHdQdAFFgP9bAp1DPlJoY7nm3K7+ggUZOM+UFLauazYBmxP5M8eHxXlsDG5i3hNQGq48VjgnEMOl4Gd/QldYCo5xFvC8r0sTKTqvT/lvcLybHccj6R2jNicjKY/hhC7Zb+KJGUGmSVyuCW6oG5gPEmUsoeKocH5SE51kT4sxgOy5SLU4olG/sIgmkUFuF34BmNQdaNPaPhrPY7zNa6XU9ew+F8i+nQ1IUYAx69G6J6kJZC/O3Bhi4PsC0P3i2RhmOC8j+Skj+Skif9ZVvRmxrPdN0TyIwfSWqDtnKnkoUjh87vFvpo2UjXFELeNBuJ3002ssJGPWUgRSZRpgtvmEnEXTOJ0tJecvkP+Wp+D7aka8jbStoNPtfVdja7ZhZbTk+/93QHVwEd05Hn6vzEVGxmB4+m6zCXRBVs0Z0wki79XXfKB0cvmrnzupq7wQI9x5Qwu9B4XJjuNe5anLQ0R/ZHwOndka83SVKWz5ukrveRb2Nw9N8XIfqJlc73UrSJPF3+Bt7HcNrph0/0zx3Ni7Zw3v5yZFuwTqtWH0fsLMdzFZbY10nMDRyC+X7kD4dwMnfuoW/uEUw/bXIbj9BEn2cuJRrvQcLhPELXWzTSddyJR8DYGUGMHB9BmxDL0xLNnu+PfN/xbOI5toOINn/nnW+XT8NiN5d4EPpMiFU3ZClv0ffXh/Yl7T3xTzTfppv8Lm7ad3UmUiuvdibMl2CkioH8cbVv4UxYsf5luap7/ft8aPoX&lt;/diagram&gt;&lt;/mxfile&gt;" style="background-color: rgb(255, 255, 255);"><defs/><g><rect x="70" y="30" width="160" height="670" fill="#d5e8d4" stroke="#82b366" pointer-events="all"/><rect x="430" y="30" width="150" height="670" fill="#e1d5e7" stroke="#9673a6" pointer-events="all"/><rect x="130" y="0" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 10px; margin-left: 131px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><font style="font-size: 14px">Client</font></div></div></div></foreignobject><text x="150" y="14" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Client</text></switch></g><rect x="480" y="0" width="40" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 38px; height: 1px; padding-top: 10px; margin-left: 481px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><font style="font-size: 14px">Server</font></div></div></div></foreignobject><text x="500" y="14" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">Server</text></switch></g><path d="M 220 70 L 433.63 65.14" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 438.88 65.03 L 431.96 68.68 L 433.63 65.14 L 431.8 61.69 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 68px; margin-left: 324px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; "><font style="font-size: 12px">请求publicKey</font></div></div></div></foreignobject><text x="324" y="71" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">请求publicKey</text></switch></g><rect x="80" y="40" width="140" height="60" rx="9" ry="9" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 138px; height: 1px; padding-top: 70px; margin-left: 81px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">发起请求</div></div></div></foreignobject><text x="150" y="74" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">发起请求</text></switch></g><path d="M 30 30 L 30 691.76" fill="none" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="stroke"/><path d="M 30 697.76 L 26 689.76 L 30 691.76 L 34 689.76 Z" fill="#000000" stroke="#000000" stroke-width="2" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 249px; margin-left: 31px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; font-weight: bold; background-color: #ffffff; white-space: nowrap; ">Time Line</div></div></div></foreignobject><text x="31" y="252" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle" font-weight="bold">Time Line</text></switch></g><rect x="440" y="40" width="130" height="50" rx="7.5" ry="7.5" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 65px; margin-left: 441px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">处理请求返回公钥:publicKey</div></div></div></foreignobject><text x="505" y="69" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">处理请求返回公钥:publicKey</text></switch></g><path d="M 437.79 83.55 L 225.51 206.8" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 220.97 209.44 L 225.26 202.9 L 225.51 206.8 L 228.78 208.95 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 147px; margin-left: 329px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; "><span style="font-size: 12px ; background-color: rgb(248 , 249 , 250)">返回publicKey</span></div></div></div></foreignobject><text x="329" y="150" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">返回publicKey</text></switch></g><rect x="80" y="130" width="140" height="160" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><rect x="80" y="130" width="110" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 108px; height: 1px; padding-top: 140px; margin-left: 81px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">验证公钥合法性</div></div></div></foreignobject><text x="135" y="144" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">验证公钥合法性</text></switch></g><path d="M 145 190 L 145 210 L 145 190 L 145 203.63" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 145 208.88 L 141.5 201.88 L 145 203.63 L 148.5 201.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><ellipse cx="145" cy="175" rx="45" ry="15" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 175px; margin-left: 101px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><font style="font-size: 10px">使用CA验证公钥</font></div></div></div></foreignobject><text x="145" y="179" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">使用CA验证公钥</text></switch></g><path d="M 145 260 L 145 285 L 144 285 L 143.99 303.63" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 143.98 308.88 L 140.49 301.88 L 143.99 303.63 L 147.49 301.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 276px; margin-left: 146px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Y</div></div></div></foreignobject><text x="146" y="279" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">Y</text></switch></g><path d="M 190 235 L 243.63 235" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 248.88 235 L 241.88 238.5 L 243.63 235 L 241.88 231.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 235px; margin-left: 208px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">N</div></div></div></foreignobject><text x="208" y="238" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">N</text></switch></g><path d="M 145 210 L 190 235 L 145 260 L 100 235 Z" fill="#ffffff" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 235px; margin-left: 101px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">是否合法</div></div></div></foreignobject><text x="145" y="239" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">是否合法</text></switch></g><rect x="80" y="310" width="140" height="110" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><ellipse cx="287.5" cy="235" rx="37.5" ry="27.5" fill="#ffe6cc" stroke="#d79b00" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 73px; height: 1px; padding-top: 235px; margin-left: 251px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">结束</div></div></div></foreignobject><text x="288" y="239" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">结束</text></switch></g><rect x="60" y="310" width="180" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 178px; height: 1px; padding-top: 320px; margin-left: 61px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">生成随机密钥:randomKey</div></div></div></foreignobject><text x="150" y="324" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">生成随机密钥:randomKey</text></switch></g><rect x="90" y="330" width="120" height="60" rx="9" ry="9" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 360px; margin-left: 91px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="color: rgb(0 , 0 , 0) ; font-family: &quot;helvetica&quot; ; font-size: 10px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; display: inline ; float: none">使用publicKey加密randomKey得到：<br/>encryptRandomKey<br/></span></div></div></div></foreignobject><text x="150" y="364" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">使用publicKey加密randomKey…</text></switch></g><path d="M 210 360 L 434.3 247.85" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 439 245.5 L 434.3 251.76 L 434.3 247.85 L 431.17 245.5 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 302px; margin-left: 325px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; "><span style="font-size: 12px ; background-color: rgb(248 , 249 , 250)">发送encryptRandomKey</span></div></div></div></foreignobject><text x="325" y="306" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">发送encryptRan…</text></switch></g><path d="M 505 310 L 505 330 L 505 310 L 505 323.63" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 505 328.88 L 501.5 321.88 L 505 323.63 L 508.5 321.88 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><rect x="440" y="180" width="130" height="130" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><rect x="450" y="187.5" width="90" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 88px; height: 1px; padding-top: 198px; margin-left: 451px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><font style="font-size: 12px">获取randomKey</font></div></div></div></foreignobject><text x="495" y="201" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">获取randomKey</text></switch></g><rect x="445" y="210" width="120" height="80" rx="12" ry="12" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 250px; margin-left: 446px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">使用<font color="#ff3333">私钥解密</font><br/><span style="font-size: 12px">encryptRandomKey<br/>得到：</span><span style="font-size: 12px">randomKey</span><span style="font-size: 12px"><br/></span></div></div></div></foreignobject><text x="505" y="254" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">使用私钥解密encryptRandomKey…</text></switch></g><rect x="440" y="330" width="130" height="130" fill="#dae8fc" stroke="#6c8ebf" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 128px; height: 1px; padding-top: 395px; margin-left: 441px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 12px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">使用randomKey加密要传输的业务数据data</div></div></div></foreignobject><text x="505" y="399" fill="#000000" font-family="Helvetica" font-size="12px" text-anchor="middle">使用randomKey加密要传输的业务数据data</text></switch></g><rect x="80" y="440" width="140" height="120" fill="#fff2cc" stroke="#d6b656" pointer-events="all"/><rect x="80" y="450" width="70" height="20" fill="none" stroke="none" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 68px; height: 1px; padding-top: 460px; margin-left: 81px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><font style="font-size: 11px">解密数据</font></div></div></div></foreignobject><text x="115" y="464" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">解密数据</text></switch></g><rect x="90" y="480" width="120" height="60" rx="9" ry="9" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 510px; margin-left: 91px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; "><span style="color: rgb(0 , 0 , 0) ; font-family: &quot;helvetica&quot; ; font-size: 10px ; font-style: normal ; font-weight: 400 ; letter-spacing: normal ; text-align: center ; text-indent: 0px ; text-transform: none ; word-spacing: 0px ; background-color: rgb(248 , 249 , 250) ; display: inline ; float: none">使用randomKey解密密文，得到明文<br/></span></div></div></div></foreignobject><text x="150" y="514" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">使用randomKey解密密文，得到明文&#xa;</text></switch></g><path d="M 440 395 L 215.92 483.86" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 211.04 485.79 L 216.26 479.96 L 215.92 483.86 L 218.84 486.47 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 440px; margin-left: 330px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 11px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; "><span style="font-size: 12px ; background-color: rgb(248 , 249 , 250)">发送data</span></div></div></div></foreignobject><text x="330" y="443" fill="#000000" font-family="Helvetica" font-size="11px" text-anchor="middle">发送data</text></switch></g><ellipse cx="150" cy="620" rx="60" ry="40" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 620px; margin-left: 91px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">后续请求使用randomKey加密/解密数据</div></div></div></foreignobject><text x="150" y="624" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">后续请求使用randomKey加密/解密数据</text></switch></g><path d="M 192.43 591.72 L 461.21 581.95" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 466.46 581.76 L 459.59 585.51 L 461.21 581.95 L 459.33 578.51 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 585px; margin-left: 323px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Request</div></div></div></foreignobject><text x="323" y="589" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">Request</text></switch></g><ellipse cx="510" cy="610" rx="60" ry="40" fill="#ffffff" stroke="#000000" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 118px; height: 1px; padding-top: 610px; margin-left: 451px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; white-space: normal; word-wrap: normal; ">后续请求使用randomKey加密/解密数据</div></div></div></foreignobject><text x="510" y="614" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">后续请求使用randomKey加密/解密数据</text></switch></g><path d="M 467.57 638.28 L 198.79 648.05" fill="none" stroke="#000000" stroke-miterlimit="10" stroke-dasharray="3 3" pointer-events="stroke"/><path d="M 193.54 648.24 L 200.41 644.49 L 198.79 648.05 L 200.67 651.49 Z" fill="#000000" stroke="#000000" stroke-miterlimit="10" pointer-events="all"/><g transform="translate(-0.5 -0.5)"><switch><foreignobject style="overflow: visible; text-align: left;" pointer-events="none" width="100%" height="100%" requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"><div xmlns="http://www.w3.org/1999/xhtml" style="display: flex; align-items: unsafe center; justify-content: unsafe center; width: 1px; height: 1px; padding-top: 643px; margin-left: 324px;"><div style="box-sizing: border-box; font-size: 0; text-align: center; "><div style="display: inline-block; font-size: 13px; font-family: Helvetica; color: #000000; line-height: 1.2; pointer-events: all; background-color: #ffffff; white-space: nowrap; ">Response</div></div></div></foreignobject><text x="324" y="647" fill="#000000" font-family="Helvetica" font-size="13px" text-anchor="middle">Response</text></switch></g></g><switch><g requiredfeatures="http://www.w3.org/TR/SVG11/feature#Extensibility"/><a transform="translate(0,-5)" xlink:href="https://www.diagrams.net/doc/faq/svg-export-text-problems" target="_blank"><text text-anchor="middle" font-size="10px" x="50%" y="100%">Viewer does not support full SVG 1.1</text></a></switch></svg><h1 id="流程说明"><a href="#流程说明" class="headerlink" title="流程说明"></a>流程说明</h1><h2 id="1-客户端获取公钥"><a href="#1-客户端获取公钥" class="headerlink" title="1.客户端获取公钥"></a>1.客户端获取公钥</h2><ul><li><p>客户端发送请求，服务端返回公钥</p></li><li><p>客户端用证书验证公钥，如果合法，继续下一步</p></li></ul><h2 id="2-客户端生成用于加密数据的密钥"><a href="#2-客户端生成用于加密数据的密钥" class="headerlink" title="2.客户端生成用于加密数据的密钥"></a>2.客户端生成用于加密数据的密钥</h2><ul><li>客户端生成随机密钥</li><li>然后用服务器返回的公钥对这个密钥加密，得到加密后的密钥</li></ul><h2 id="3-服务端验证密钥"><a href="#3-服务端验证密钥" class="headerlink" title="3.服务端验证密钥"></a>3.服务端验证密钥</h2><ul><li>客户端将加密后的密钥发给服务端</li><li>服务端使用私钥解密得到密钥</li></ul><h2 id="4-使用密钥加密数据进行传输，使用密钥解密数据得到明文"><a href="#4-使用密钥加密数据进行传输，使用密钥解密数据得到明文" class="headerlink" title="4.使用密钥加密数据进行传输，使用密钥解密数据得到明文"></a>4.使用密钥加密数据进行传输，使用密钥解密数据得到明文</h2><ul><li>服务端使用获得的密钥加密数据，发送给客户端</li><li>客户端使用密钥解密得到明文。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关键点&quot;&gt;&lt;a href=&quot;#关键点&quot; class=&quot;headerlink&quot; title=&quot;关键点&quot;&gt;&lt;/a&gt;关键点&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;strong&gt;非对称加密&lt;/strong&gt; 处理用于加密数据的密钥&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>根据末节点找到指定路径</title>
    <link href="http://lyan.me/2020/12/02/%E6%A0%B9%E6%8D%AE%E6%9C%AB%E8%8A%82%E7%82%B9%E6%89%BE%E5%88%B0%E6%8C%87%E5%AE%9A%E8%B7%AF%E5%BE%84/"/>
    <id>http://lyan.me/2020/12/02/根据末节点找到指定路径/</id>
    <published>2020-12-02T09:53:54.000Z</published>
    <updated>2022-09-24T01:55:55.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在业务开发中，经常会遇到级联的数据结构，比如省市区、公司组织架构等; 如下图中的树形结构，现在要找出</p></blockquote><p><img src="/assets/tree.png" width="500" style="margin: 30px auto 0 auto"></p><h1 id="数据结构定义如下"><a href="#数据结构定义如下" class="headerlink" title="数据结构定义如下"></a>数据结构定义如下</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">interface Node &#123;</span><br><span class="line">  value: any;</span><br><span class="line">  children?: Node[];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="递归实现"><a href="#递归实现" class="headerlink" title="递归实现"></a>递归实现</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findPath</span>(<span class="params">node, v</span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">walk</span>(<span class="params">node, path = []</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">      <span class="keyword">return</span> path;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> &#123; children, value &#125; = node;</span><br><span class="line">    <span class="keyword">if</span> (children &amp;&amp; children.length) &#123;</span><br><span class="line">      <span class="keyword">let</span> len = children.length;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> n = children[i];</span><br><span class="line">        walk(n, path.slice(<span class="number">0</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      path.push(value);</span><br><span class="line">      <span class="keyword">if</span> (value === v) &#123;</span><br><span class="line">        <span class="keyword">return</span> path;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在业务开发中，经常会遇到级联的数据结构，比如省市区、公司组织架构等; 如下图中的树形结构，现在要找出&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;/assets/tree.png&quot; width=&quot;500&quot; style=&quot;margi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用@route装饰器简化koa-router写法</title>
    <link href="http://lyan.me/2019/03/22/%E4%BD%BF%E7%94%A8-route%E8%A3%85%E9%A5%B0%E5%99%A8%E7%AE%80%E5%8C%96koa-router%E5%86%99%E6%B3%95/"/>
    <id>http://lyan.me/2019/03/22/使用-route装饰器简化koa-router写法/</id>
    <published>2019-03-22T04:38:24.000Z</published>
    <updated>2022-09-24T01:55:55.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文所有代码见<a href="https://github.com/liuzheng644607/project-start-seed/tree/master/src/server" target="_blank" rel="noopener">github</a></p><h2 id="koa-router"><a href="#koa-router" class="headerlink" title="koa-router"></a>koa-router</h2><p><a href="https://www.npmjs.com/package/koa-router" target="_blank" rel="noopener">koa-router</a>是<a href="https://www.npmjs.com/package/koa" target="_blank" rel="noopener">koa</a>项目中被广泛使用到的一个路由中间件。<br>koa-router的基本使用方法如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">var</span> Router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> Router();</span><br><span class="line"> </span><br><span class="line">router.get(<span class="string">'/'</span>, (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="comment">// ctx.router available</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 在app中使用routes中间件</span></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods());</span><br></pre></td></tr></table></figure></p><p>可以看到，如果项目中有很多路由，那么我们需要写很多的类似<code>router.get(&#39;xxx&#39;, () =&gt; {})</code>这样的代码，重复劳动（多写了几个单词？）。我们需要一种方式来简化router的书写，decorator（装饰器/注解）登场了。<br><a id="more"></a></p><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>熟悉java spring开发的同学一定对<code>@RequestMapping</code>， <code>@Controller</code>这些注解不陌生。<br>比如用户登录接口<code>/user/login</code>, 对应java spring路由写法如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/user"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping</span>(path = <span class="string">"/login"</span>, method=&#123;RequestMethod.POST&#125;)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在javascript里也可以使用类似的写法，接下来我用装饰器来描述路由。</p><h2 id="书写Controller"><a href="#书写Controller" class="headerlink" title="书写Controller"></a>书写Controller</h2><p>假如我们的Controller文件如下, 我们一步一步实现这样的写法，<a href="https://draw.lyan.me/api/monitor/alive" target="_blank" rel="noopener">访问 api/monitor/alive</a><br>monitor.ts<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; route &#125; from <span class="string">'@server/decorator/router'</span>;</span><br><span class="line"><span class="meta">@route(<span class="meta-string">'/api/monitor'</span>)</span></span><br><span class="line">export <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line">  <span class="meta">@route(<span class="meta-string">'/alive'</span>)</span></span><br><span class="line">  monitor() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="keyword">data</span>: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'成功'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="实现-route装饰器"><a href="#实现-route装饰器" class="headerlink" title="实现@route装饰器"></a>实现@route装饰器</h3><p>可以看出@route装饰器既能装饰Class，也能装饰成员方法；当装饰Class的时候，仅仅相当于给路由添加前缀；装饰成员方法的时候，即路由需要执行对应的方法。并返回Response到浏览器。<br>route.ts 代码如下：<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Context &#125; <span class="keyword">from</span> <span class="string">'koa'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> assert <span class="keyword">from</span> <span class="string">'assert'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> Router <span class="keyword">from</span> <span class="string">'koa-router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Middleware = Router.IMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">enum</span> RequestMethod &#123;</span><br><span class="line">  GET = <span class="string">'get'</span>,</span><br><span class="line">  POST = <span class="string">'post'</span>,</span><br><span class="line">  DELETE = <span class="string">'delete'</span>,</span><br><span class="line">  ALL = <span class="string">'all'</span>,</span><br><span class="line">  PUT = <span class="string">'put'</span>,</span><br><span class="line">  HEAD = <span class="string">'head'</span>,</span><br><span class="line">  PATCH = <span class="string">'patch'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// tslint:disable-next-line:no-any</span></span><br><span class="line"><span class="keyword">const</span> methodList = <span class="built_in">Object</span>.keys(RequestMethod).map(<span class="function">(<span class="params">k: <span class="built_in">any</span></span>) =&gt;</span> RequestMethod[k]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Method = <span class="string">'get'</span> | <span class="string">'post'</span> | <span class="string">'put'</span> | <span class="string">'delete'</span> | <span class="string">'all'</span> | <span class="string">'head'</span> | <span class="string">'patch'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootRouter = <span class="keyword">new</span> Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">route</span>(<span class="params">url: <span class="built_in">string</span> | <span class="built_in">string</span>[],</span></span></span><br><span class="line"><span class="function"><span class="params">                      method?: Method,</span></span></span><br><span class="line"><span class="function"><span class="params">                      <span class="comment">// tslint:disable-next-line:no-any</span></span></span></span><br><span class="line"><span class="function"><span class="params">                      middlewares: Middleware[] | Middleware = []</span>): <span class="title">any</span> </span>&#123;</span><br><span class="line">  <span class="comment">// tslint:disable-next-line:no-any</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target: <span class="built_in">any</span>, name: <span class="built_in">string</span>, descriptor?: <span class="built_in">any</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> midws = <span class="built_in">Array</span>.isArray(middlewares) ? middlewares : [middlewares];</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装饰类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> target === <span class="string">'function'</span> &amp;&amp; name === <span class="literal">undefined</span>  &amp;&amp; descriptor === <span class="literal">undefined</span>) &#123;</span><br><span class="line">      assert(!method, <span class="string">'@route 装饰Class时，不能有method 参数'</span> );</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 我们将router绑定在 原型上，方便访问</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (!target.prototype.router) &#123;</span><br><span class="line">        target.prototype.router = <span class="keyword">new</span> Router();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 仅仅设置Controller 前缀</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      target.prototype.router.prefix(url);</span><br><span class="line"></span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 使得当前Controller 可以执行一些公共的中间件</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">if</span> (middlewares.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        target.prototype.router.use(...midws);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装饰方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (!target.router) &#123;</span><br><span class="line">      target.router = <span class="keyword">new</span> Router();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!method) &#123;</span><br><span class="line">      method = <span class="string">'get'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert(!!target.router[method], <span class="string">`第二个参数只能是如下值之一 <span class="subst">$&#123;methodList&#125;</span>`</span>);</span><br><span class="line">    assert(<span class="keyword">typeof</span> target[name] === <span class="string">'function'</span>, <span class="string">`@route 只能装饰Class 或者 方法`</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用router</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    target.router[method](url, ...midws, <span class="keyword">async</span> (ctx: Context, next: <span class="built_in">Function</span>) =&gt; &#123;</span><br><span class="line">      <span class="comment">/**</span></span><br><span class="line"><span class="comment">       * 执行原型方法</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> descriptor.value(ctx, next);</span><br><span class="line">      ctx.body = result;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将所有被装饰的路由挂载到rootRouter，为了暴露出去给 koa 使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    rootRouter.use(target.router.routes());</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 暴露router给koa使用</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">getRouter</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> rootRouter;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="加载Controller"><a href="#加载Controller" class="headerlink" title="加载Controller"></a>加载Controller</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import &#123; getRouter &#125; <span class="keyword">from</span> <span class="string">'@server/decorator/router'</span>;</span><br><span class="line">import <span class="string">'./hello'</span>;</span><br><span class="line">import <span class="string">'./monitor'</span>;</span><br><span class="line"></span><br><span class="line"><span class="builtin-name">export</span><span class="built_in"> default </span>getRouter().routes();</span><br></pre></td></tr></table></figure><p>本文一些思路借鉴于<a href="https://github.com/xmlking/koa-router-decorators" target="_blank" rel="noopener">这里</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文所有代码见&lt;a href=&quot;https://github.com/liuzheng644607/project-start-seed/tree/master/src/server&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;koa-router&quot;&gt;&lt;a href=&quot;#koa-router&quot; class=&quot;headerlink&quot; title=&quot;koa-router&quot;&gt;&lt;/a&gt;koa-router&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/koa-router&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;koa-router&lt;/a&gt;是&lt;a href=&quot;https://www.npmjs.com/package/koa&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;koa&lt;/a&gt;项目中被广泛使用到的一个路由中间件。&lt;br&gt;koa-router的基本使用方法如下：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Koa = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;koa&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Router = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;koa-router&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; app = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Koa();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; router = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Router();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;router.get(&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;, (ctx, next) =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ctx.router available&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在app中使用routes中间件&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;app&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .use(router.routes())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  .use(router.allowedMethods());&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;可以看到，如果项目中有很多路由，那么我们需要写很多的类似&lt;code&gt;router.get(&amp;#39;xxx&amp;#39;, () =&amp;gt; {})&lt;/code&gt;这样的代码，重复劳动（多写了几个单词？）。我们需要一种方式来简化router的书写，decorator（装饰器/注解）登场了。&lt;br&gt;
    
    </summary>
    
    
      <category term="koa-router" scheme="http://lyan.me/tags/koa-router/"/>
    
      <category term="装饰器" scheme="http://lyan.me/tags/%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>nginx配置https</title>
    <link href="http://lyan.me/2019/03/20/nginx%E9%85%8D%E7%BD%AEhttps/"/>
    <id>http://lyan.me/2019/03/20/nginx配置https/</id>
    <published>2019-03-20T08:34:18.000Z</published>
    <updated>2022-09-24T01:55:55.153Z</updated>
    
    <content type="html"><![CDATA[<p>我的服务器使用的系统是CentOS 6，因此直接使用yum安装nginx，其它系统以及版本可能有所差异。</p><h2 id="使用yum安装nginx"><a href="#使用yum安装nginx" class="headerlink" title="使用yum安装nginx"></a>使用yum安装nginx</h2><p>step1, 先要安装nginx的yum源</p><h3 id="设置源"><a href="#设置源" class="headerlink" title="设置源"></a>设置源</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh http:<span class="regexp">//</span>nginx.org<span class="regexp">/packages/</span>centos<span class="regexp">/6/</span>noarch<span class="regexp">/RPMS/</span>nginx-release-centos-<span class="number">6</span>-<span class="number">0</span>.el6.ngx.noarch.rpm</span><br></pre></td></tr></table></figure><p>执行完上面的命令后，我们使用命令<code>yum info nginx</code>查看一下Nginx 软件包信息.<br><a id="more"></a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@host</span> <span class="string">nginx]#</span> <span class="string">yum</span> <span class="string">info</span> <span class="string">nginx</span></span><br><span class="line"><span class="string">已加载插件：fastestmirror</span></span><br><span class="line"><span class="string">Loading</span> <span class="string">mirror</span> <span class="string">speeds</span> <span class="string">from</span> <span class="string">cached</span> <span class="string">hostfile</span></span><br><span class="line"> <span class="string">*</span> <span class="attr">base:</span> <span class="string">repos.lax.quadranet.com</span></span><br><span class="line"> <span class="string">*</span> <span class="attr">elrepo-kernel:</span> <span class="string">repos.lax-noc.com</span></span><br><span class="line"> <span class="string">*</span> <span class="attr">extras:</span> <span class="string">mirror.fileplanet.com</span></span><br><span class="line"> <span class="string">*</span> <span class="attr">updates:</span> <span class="string">mirror.scalabledns.com</span></span><br><span class="line"><span class="string">已安装的软件包</span></span><br><span class="line"><span class="attr">Name        :</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Arch        :</span> <span class="string">i686</span></span><br><span class="line"><span class="attr">Version     :</span> <span class="number">1.14</span><span class="number">.2</span></span><br><span class="line"><span class="attr">Release     :</span> <span class="number">1.</span><span class="string">el6.ngx</span></span><br><span class="line"><span class="attr">Size        :</span> <span class="number">2.5</span> <span class="string">M</span></span><br><span class="line"><span class="attr">Repo        :</span> <span class="string">installed</span></span><br><span class="line"><span class="attr">From repo   :</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Summary     :</span> <span class="string">High</span> <span class="string">performance</span> <span class="string">web</span> <span class="string">server</span></span><br><span class="line"><span class="attr">URL         :</span> <span class="string">http://nginx.org/</span></span><br><span class="line"><span class="attr">License     :</span> <span class="number">2</span><span class="string">-clause</span> <span class="string">BSD-like</span> <span class="string">license</span></span><br><span class="line"><span class="attr">Description :</span> <span class="string">nginx</span> <span class="string">[engine</span> <span class="string">x]</span> <span class="string">is</span> <span class="string">an</span> <span class="string">HTTP</span> <span class="string">and</span> <span class="string">reverse</span> <span class="string">proxy</span> <span class="string">server,</span> <span class="string">as</span> <span class="string">well</span> <span class="string">as</span></span><br><span class="line">            <span class="string">:</span> <span class="string">a</span> <span class="string">mail</span> <span class="string">proxy</span> <span class="string">server.</span></span><br><span class="line"></span><br><span class="line"><span class="string">可安装的软件包</span></span><br><span class="line"><span class="attr">Name        :</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Arch        :</span> <span class="string">i386</span></span><br><span class="line"><span class="attr">Version     :</span> <span class="number">1.12</span><span class="number">.2</span></span><br><span class="line"><span class="attr">Release     :</span> <span class="number">1.</span><span class="string">el6.ngx</span></span><br><span class="line"><span class="attr">Size        :</span> <span class="number">967</span> <span class="string">k</span></span><br><span class="line"><span class="attr">Repo        :</span> <span class="string">nginx</span></span><br><span class="line"><span class="attr">Summary     :</span> <span class="string">High</span> <span class="string">performance</span> <span class="string">web</span> <span class="string">server</span></span><br><span class="line"><span class="attr">URL         :</span> <span class="string">http://nginx.org/</span></span><br><span class="line"><span class="attr">License     :</span> <span class="number">2</span><span class="string">-clause</span> <span class="string">BSD-like</span> <span class="string">license</span></span><br><span class="line"><span class="attr">Description :</span> <span class="string">nginx</span> <span class="string">[engine</span> <span class="string">x]</span> <span class="string">is</span> <span class="string">an</span> <span class="string">HTTP</span> <span class="string">and</span> <span class="string">reverse</span> <span class="string">proxy</span> <span class="string">server,</span> <span class="string">as</span> <span class="string">well</span> <span class="string">as</span></span><br><span class="line">            <span class="string">:</span> <span class="string">a</span> <span class="string">mail</span> <span class="string">proxy</span> <span class="string">server.</span></span><br></pre></td></tr></table></figure><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>step2, 安装nginx, 使用命令<code>yum install nginx</code>安装，等待安装完成。<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> nginx</span><br></pre></td></tr></table></figure></p><p> 检查nginx 版本<code>nginx -v</code><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@host nginx]# nginx -v</span><br><span class="line">nginx version: nginx/1.14.2</span><br></pre></td></tr></table></figure></p><p>这个时候我们发现nginx已经安装成功了。</p><h3 id="查看nginx配置"><a href="#查看nginx配置" class="headerlink" title="查看nginx配置"></a>查看nginx配置</h3><p>使用yum安装的nginx， 默认配置文件放在<code>/etc/nginx/nginx.conf</code> ，使用命令<code>nginx -t</code> 可以拿到配置文件的存放路径；这个命令用于测试配置文件语法是否准确无误。<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host nginx]# nginx -t</span><br><span class="line">nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> <span class="keyword">is</span> ok</span><br><span class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> test <span class="keyword">is</span> successful</span><br></pre></td></tr></table></figure></p><p>使用vim查看配置内容如下：<br><figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.......</span><br><span class="line">.......</span><br><span class="line"><span class="keyword">http</span> &#123;</span><br><span class="line">    <span class="literal">include</span>       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  <span class="keyword">main</span>  <span class="string">'<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] "<span class="variable">$request</span>" '</span></span><br><span class="line">                      <span class="string">'<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> "<span class="variable">$http_referer</span>" '</span></span><br><span class="line">                      <span class="string">'"<span class="variable">$http_user_agent</span>" "<span class="variable">$http_x_forwarded_for</span>"'</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  <span class="keyword">main</span>;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line">    <span class="literal">include</span> /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看最后一行<code>include /etc/nginx/conf.d/*.conf;</code> 便知nginx include 了<code>./conf.d/</code> 下面的所有配置文件，因此我们也可以将配置文件放在<code>./conf.d/</code> 目录下。</p><h2 id="配置https站点"><a href="#配置https站点" class="headerlink" title="配置https站点"></a>配置https站点</h2><p>在配置Https 之前，我们需要准备好购买的SSL证书文件，我使用的是阿里云提供的免费证书。<br>1、将证书文件传到服务器，我使用的是<code>scp</code>命令将证书拷贝到服务器的<code>/etc/nginx/ssl_certs/</code>目录下面。现在该目录下有两个文件，<code>xxx.pem</code> 和 <code>xxx.key</code>。</p><p>2、在创建配置文件<code>/etc/nginx/conf.d/</code>目录下创建 <code>xxx.conf</code> 文件<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /etc/nginx/<span class="keyword">conf</span>.d/draw.lyan.<span class="keyword">me</span>.<span class="keyword">conf</span></span><br></pre></td></tr></table></figure></p><p>将如下配置copy到配置文件中<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>       <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span>  draw.lyan.me;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>      /etc/nginx/ssl_certs/draw.lyan.me.pem;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  /etc/nginx/ssl_certs/draw.lyan.me.key;</span><br><span class="line">    <span class="comment">#ssl_session_cache    shared:SSL:1m;</span></span><br><span class="line">    <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line">    <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">    <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">        <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> draw.lyan.me; <span class="comment"># 你的域名</span></span><br><span class="line">    <span class="comment"># 强制跳转https</span></span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)</span> https://<span class="variable">$server_name</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后重启 nginx, 使用 <code>service nginx restart</code> 命令重启。<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@host conf.d]#<span class="built_in"> service </span>nginx restart</span><br><span class="line">Stopping nginx:                                            [  OK  ]</span><br><span class="line">Starting nginx:                                            [  OK  ]</span><br></pre></td></tr></table></figure></p><p>访问 <a href="https://draw.lyan.me" target="_blank" rel="noopener">https://draw.lyan.me</a> ，(PS: 我的服务器配置了dns解析)，即可发现https已经生效<br><img src="https://upload-images.jianshu.io/upload_images/188895-eaa4b72f3333439e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的服务器使用的系统是CentOS 6，因此直接使用yum安装nginx，其它系统以及版本可能有所差异。&lt;/p&gt;
&lt;h2 id=&quot;使用yum安装nginx&quot;&gt;&lt;a href=&quot;#使用yum安装nginx&quot; class=&quot;headerlink&quot; title=&quot;使用yum安装nginx&quot;&gt;&lt;/a&gt;使用yum安装nginx&lt;/h2&gt;&lt;p&gt;step1, 先要安装nginx的yum源&lt;/p&gt;
&lt;h3 id=&quot;设置源&quot;&gt;&lt;a href=&quot;#设置源&quot; class=&quot;headerlink&quot; title=&quot;设置源&quot;&gt;&lt;/a&gt;设置源&lt;/h3&gt;&lt;figure class=&quot;highlight awk&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rpm -ivh http:&lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;nginx.org&lt;span class=&quot;regexp&quot;&gt;/packages/&lt;/span&gt;centos&lt;span class=&quot;regexp&quot;&gt;/6/&lt;/span&gt;noarch&lt;span class=&quot;regexp&quot;&gt;/RPMS/&lt;/span&gt;nginx-release-centos-&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.el6.ngx.noarch.rpm&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行完上面的命令后，我们使用命令&lt;code&gt;yum info nginx&lt;/code&gt;查看一下Nginx 软件包信息.&lt;br&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://lyan.me/tags/nginx/"/>
    
      <category term="https" scheme="http://lyan.me/tags/https/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序IDE上传/预览代码分析</title>
    <link href="http://lyan.me/2019/01/13/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FIDE%E4%B8%8A%E4%BC%A0-%E9%A2%84%E8%A7%88%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>http://lyan.me/2019/01/13/微信小程序IDE上传-预览代码分析/</id>
    <published>2019-01-13T10:45:37.000Z</published>
    <updated>2022-09-24T01:55:55.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>接口分析见：<a href="https://www.jianshu.com/p/a1f357152dca" title="小程序IDE http接口分析" target="_blank" rel="noopener">小程序IDE http接口分析</a></p></blockquote><h2 id="打包源代码"><a href="#打包源代码" class="headerlink" title="打包源代码"></a>打包源代码</h2><p>主要步骤就是，遍历小程序项目目录，读取每一个文件，最终合并成一个文件<br>内容如下：packFile.js</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">"glob"</span>),</span><br><span class="line">b = <span class="built_in">require</span>(<span class="string">"fs"</span>),</span><br><span class="line">c = <span class="built_in">require</span>(<span class="string">"path"</span>),</span><br><span class="line">e = <span class="built_in">require</span>(<span class="string">"crypto"</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="keyword">async</span> (f, g, h = &#123;&#125;) =&gt; &#123;</span><br><span class="line"><span class="keyword">var</span> i = [</span><br><span class="line">  <span class="keyword">new</span> Buffer(<span class="number">1</span>),</span><br><span class="line">  <span class="keyword">new</span> Buffer(<span class="number">4</span>),</span><br><span class="line">  <span class="keyword">new</span> Buffer(<span class="number">4</span>),</span><br><span class="line">  <span class="keyword">new</span> Buffer(<span class="number">4</span>),</span><br><span class="line">  <span class="keyword">new</span> Buffer(<span class="number">1</span>)</span><br><span class="line">];</span><br><span class="line">i[<span class="number">0</span>].writeIntLE(<span class="number">190</span>), i[<span class="number">1</span>].writeInt32BE(<span class="number">1</span>), i[<span class="number">4</span>].writeIntLE(<span class="number">237</span>);</span><br><span class="line"><span class="keyword">let</span> j = <span class="number">0</span>,</span><br><span class="line">  k = [],</span><br><span class="line">  l = [],</span><br><span class="line">  m = [],</span><br><span class="line">  n = [],</span><br><span class="line">  o = [];</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">p, q</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> r = <span class="built_in">Object</span>.assign(&#123; nodir: !<span class="number">0</span> &#125;, h),</span><br><span class="line">    s = &#123;&#125;;</span><br><span class="line">  a(<span class="string">`<span class="subst">$&#123;f&#125;</span>/**`</span>, r, <span class="function">(<span class="params">a, r</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!a) &#123;</span><br><span class="line">      r.forEach(<span class="function"><span class="params">a</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> d = b.readFileSync(a),</span><br><span class="line">          g = c.relative(f, a);</span><br><span class="line">        <span class="keyword">if</span> (h.needMd5) &#123;</span><br><span class="line">          <span class="keyword">let</span> a = e.createHash(<span class="string">"md5"</span>);</span><br><span class="line">          a.update(d);</span><br><span class="line">          <span class="keyword">let</span> b = a.digest(<span class="string">"hex"</span>);</span><br><span class="line">          <span class="keyword">if</span> (((s[g] = b), h.ignoreFileMd5 &amp;&amp; h.ignoreFileMd5[g] == b))</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> i = <span class="keyword">new</span> Buffer(<span class="string">`/<span class="subst">$&#123;g.replace(<span class="regexp">/\\/g</span>, <span class="string">"/"</span>)&#125;</span>`</span>);</span><br><span class="line">        j++, m.push(i), n.push(d);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> a = <span class="number">18</span> + <span class="number">12</span> * j + Buffer.concat(m).length;</span><br><span class="line">      l = m.map(<span class="function">(<span class="params">b, c</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> d = <span class="keyword">new</span> Buffer(<span class="number">4</span>);</span><br><span class="line">        d.writeInt32BE(b.length);</span><br><span class="line">        <span class="keyword">let</span> e = <span class="keyword">new</span> Buffer(<span class="number">4</span>),</span><br><span class="line">          f = n[c].length,</span><br><span class="line">          g = a;</span><br><span class="line">        e.writeInt32BE(g), (a += f);</span><br><span class="line">        <span class="keyword">let</span> h = <span class="keyword">new</span> Buffer(<span class="number">4</span>);</span><br><span class="line">        <span class="keyword">return</span> h.writeInt32BE(f), Buffer.concat([d, b, e, h]);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="keyword">let</span> q = <span class="keyword">new</span> Buffer(<span class="number">4</span>);</span><br><span class="line">      q.writeInt32BE(j),</span><br><span class="line">        l.unshift(q),</span><br><span class="line">        (k = Buffer.concat(l)),</span><br><span class="line">        (o = Buffer.concat(n)),</span><br><span class="line">        i[<span class="number">2</span>].writeInt32BE(k.length),</span><br><span class="line">        i[<span class="number">3</span>].writeInt32BE(o.length),</span><br><span class="line">        (i = Buffer.concat(i));</span><br><span class="line">      <span class="keyword">let</span> t = Buffer.concat([i, k, o]);</span><br><span class="line">      b.writeFileSync(g, t),</span><br><span class="line">        p(&#123; destPath: g, data: t, fileMd5Info: s &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> q(a);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="上传预览"><a href="#上传预览" class="headerlink" title="上传预览"></a>上传预览</h2><p>使用packFile.js打包源代码，将结果拿到，然后进行gz压缩，调用request模块进行上传.<br>upload.js 如下<br><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> zlib = <span class="built_in">require</span>(<span class="string">"zlib"</span>);</span><br><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">"request"</span>);</span><br><span class="line"><span class="keyword">const</span> readFile = <span class="built_in">require</span>(<span class="string">'./packFile'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'https://servicewechat.com/wxa-dev-new/testsource?_r=0.8285819896175328&amp;appid=xxx&amp;platform=0&amp;ext_appid=&amp;os=darwin&amp;clientversion=1011711020&amp;gzip=1&amp;path=pages%2Fhome%3F&amp;newticket=_GWuaDA19IaLERB2pjnjJGaI61JHOfXnA8N6dDoJT20&amp;os=darwin&amp;clientversion=1.01.1711020'</span>;</span><br><span class="line"><span class="keyword">var</span> f = readFile(<span class="string">'dist/'</span>, <span class="string">'./1.wx'</span>).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> data = zlib.gzipSync(res.data);</span><br><span class="line">    request(&#123; url, body: data, method: <span class="string">'post'</span>,<span class="string">"proxy"</span>:<span class="string">"http://127.0.0.1:8888"</span>,<span class="string">"tunnel"</span>:<span class="literal">false</span> &#125;, <span class="function">(<span class="params">a, b, c</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(c));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>运行 <code>sudo node ./upload.js</code>;<br>则会生成<code>1.wx</code>文件，拿到这个文件上传就行了～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;接口分析见：&lt;a href=&quot;https://www.jianshu.com/p/a1f357152dca&quot; title=&quot;小程序IDE http接口分析&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;小程序IDE http接口分
      
    
    </summary>
    
    
      <category term="小程序" scheme="http://lyan.me/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序IDE之http接口分析</title>
    <link href="http://lyan.me/2019/01/10/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8FIDE%E4%B9%8Bhttp%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90/"/>
    <id>http://lyan.me/2019/01/10/微信小程序IDE之http接口分析/</id>
    <published>2019-01-10T10:33:34.000Z</published>
    <updated>2022-09-24T01:55:55.155Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在2017年的时候就做了这个分析，一直没发出来。⚠️注意文中使用的ide版本是Mac 版的，ide version: 1.01.1711020，不推荐在生产环境中使用。</p></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>下载IDE版本：1.01.1711020</p><ul><li><p>美化开发工具js代码：在js目录执行命令 <code>find . -type f -name &#39;*.js&#39; -exec js-beautify -r -s 2 -p -f &#39;{}&#39; \</code>;</p></li><li><p>打开针对IDE的调试工具：在./app.nw/js/core/index.js 第81行 init() 过后 加入以下代码：<code>nw.Window.get().showDevTools()</code>;</p></li><li><p>在IDE源码中使用 <code>global.contentWindow.console.log</code> 来打印变量</p><a id="more"></a></li></ul><h1 id="微信开发者工具登陆接口"><a href="#微信开发者工具登陆接口" class="headerlink" title="微信开发者工具登陆接口"></a>微信开发者工具登陆接口</h1><p><a href="https://gist.github.com/liuzheng644607/9ae29c8516aac8c94d893cfca2a4c7b9" target="_blank" rel="noopener">URL配置文件</a><br>全局搜索 <strong><em>LOGIN_URL</em></strong><br>登录页面的固定url:<br><a href="https://open.weixin.qq.com/connect/qrconnect?appid=xxx&amp;redirect_uri=https%3a%2f%2fmp.weixin.qq.com%2fdebug%2fcgi-bin%2fwebdebugger%2fqrcode&amp;scope=snsapi_login&amp;state=login" title="https://open.weixin.qq.com/connect/qrconnect?appid=wxde40e023744664cb&amp;redirect_uri=https%3a%2f%2fmp.weixin.qq.com%2fdebug%2fcgi-bin%2fwebdebugger%2fqrcode&amp;scope=snsapi_login&amp;state=login" target="_blank" rel="noopener">https://open.weixin.qq.com/connect/qrconnect?appid=xxx&amp;redirect_uri=https%3a%2f%2fmp.weixin.qq.com%2fdebug%2fcgi-bin%2fwebdebugger%2fqrcode&amp;scope=snsapi_login&amp;state=login</a><br>他返回二维码扫码页面（html）。<br>此处代码可以全局搜索 <code>_longPollURL</code> 定位到该文件。<br><strong>在集成到发布系统的时候，完全可以用headless chrome 或者是 phantom js 模拟请求来一步搞定。</strong></p><h1 id="ide中登陆流程如下"><a href="#ide中登陆流程如下" class="headerlink" title="ide中登陆流程如下"></a>ide中登陆流程如下</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// step1: 拿到二维码链接</span></span><br><span class="line"><span class="keyword">const</span> content = <span class="string">''</span>; <span class="comment">// 上面接口返回的html</span></span><br><span class="line"><span class="keyword">const</span> qrcodeReg = <span class="regexp">/src="\/(connect\/qrcode\/.+)"/</span>;</span><br><span class="line"><span class="keyword">const</span> s = c.match(qrcodeReg)[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> src = <span class="string">`https://open.weixin.qq.com/<span class="subst">$&#123;s&#125;</span>`</span>; <span class="comment">// 拼接出登陆二维码url</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// step2 : 拿到轮询链接, 用于轮询登陆状态</span></span><br><span class="line"><span class="keyword">const</span> longPollReg = <span class="regexp">/"(https:\/\/long.open.weixin.qq.com\/connect\/l\/qrconnect\?uuid=.+?)"/</span>;</span><br><span class="line"><span class="keyword">const</span> pollUrl = content.match(longPollReg)[<span class="number">1</span>];</span><br><span class="line"> </span><br><span class="line"><span class="comment">// step3 轮询登陆结果</span></span><br><span class="line"><span class="keyword">const</span> LOGIN_WX_ERRR_CODE = &#123;</span><br><span class="line">    SUCCESS: <span class="number">405</span>,</span><br><span class="line">    SCANNED: <span class="number">404</span>,</span><br><span class="line">    CANCELLED: <span class="number">403</span>,</span><br><span class="line">    TIMEOUT: <span class="number">402</span>,</span><br><span class="line">    ERROR: <span class="number">500</span>,</span><br><span class="line">    KEEP_ALIVE: <span class="number">408</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> platform = <span class="string">"darwin"</span> === process.platform ? <span class="string">"darwin"</span> : <span class="string">"win"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// poll</span></span><br><span class="line">request(&#123;</span><br><span class="line">    url: <span class="string">`<span class="subst">$&#123;pollUrl&#125;</span>&amp;last=""&#125;&amp;_=<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span>,</span><br><span class="line">    headers: &#123; <span class="string">"Content-Type"</span>: <span class="string">"application/javascript"</span> &#125;,</span><br><span class="line">    timeout: <span class="number">60000</span></span><br><span class="line">&#125;, (a, b, c) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 返回了一段js代码</span></span><br><span class="line">    <span class="built_in">eval</span>(c);</span><br><span class="line">    <span class="keyword">const</span> e = <span class="built_in">window</span>.wx_errcode;</span><br><span class="line">    <span class="keyword">switch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">case</span> LOGIN_WX_ERRR_CODE.SUCCESS:</span><br><span class="line">            <span class="keyword">const</span> loginRedirectUrl = <span class="string">`https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/qrcode?code=<span class="subst">$&#123;<span class="built_in">window</span>.wx_code&#125;</span>&amp;state=<span class="subst">$&#123;platform&#125;</span>`</span>;</span><br><span class="line">            <span class="comment">// 拿到登陆信息</span></span><br><span class="line">            request(&#123; <span class="attr">url</span>: loginRedirectUrl &#125;, (a, b, res) =&gt; &#123;</span><br><span class="line">                <span class="keyword">let</span> a = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">                <span class="keyword">let</span> i = b.headers,</span><br><span class="line">                j = i[<span class="string">"debugger-signature"</span>],</span><br><span class="line">                k = i[<span class="string">"debugger-newticket"</span>],</span><br><span class="line">                l = +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">                m = &#123;</span><br><span class="line">                  signature: j,</span><br><span class="line">                  newticket: k,</span><br><span class="line">                  openid: a.openid,</span><br><span class="line">                  nickName: a.nickname,</span><br><span class="line">                  headUrl:</span><br><span class="line">                    a.headurl ||</span><br><span class="line">                    <span class="string">"https://res.wx.qq.com/zh_CN/htmledition/v2/images/web_wechat_no_contect.png"</span>,</span><br><span class="line">                  ticketExpiredTime: <span class="number">1e3</span> * a.ticket_expired_time + l,</span><br><span class="line">                  signatureExpiredTime: <span class="number">1e3</span> * a.signature_expired_time + l,</span><br><span class="line">                  sex: <span class="number">1</span> === a.sex ? <span class="string">"male"</span> : <span class="string">"female"</span>,</span><br><span class="line">                  province: a.province,</span><br><span class="line">                  city: a.city,</span><br><span class="line">                  contry: a.contry</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="生成体验版二维码"><a href="#生成体验版二维码" class="headerlink" title="生成体验版二维码"></a>生成体验版二维码</h2><p>体验版二维码链接： <a href="https://open.weixin.qq.com/sns/getexpappinfo?appid=wx605e411ab08c87f3&amp;path=pages%2Fhome.html#wechat-redirect" title="https://open.weixin.qq.com/sns/getexpappinfo?appid=wx605e411ab08c87f3&amp;path=pages%2Fhome.html#wechat-redirect" target="_blank" rel="noopener">https://open.weixin.qq.com/sns/getexpappinfo?appid=xxx&amp;path=pages%2Fhome.html#wechat-redirect</a></p><p>⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️⚠️注意</p><blockquote><p>预览接口 和 上传接口的 http method 都是 post，下面表格列的参数 是需要附加到url上面的query参数。<br>post的 body数据就是打包好的.wx文件，示例代码 见文章 <a href="https://www.jianshu.com/p/50dec765939e" target="_blank" rel="noopener">微信小程序上传/预览代码分析</a> 末尾。</p></blockquote><h2 id="预览接口"><a href="#预览接口" class="headerlink" title="预览接口"></a>预览接口</h2><table><thead><tr><th style="text-align:left">接口描述</th><th>预览小程序</th></tr></thead><tbody><tr><td style="text-align:left">域名</td><td><a href="https://servicewechat.com" target="_blank" rel="noopener">https://servicewechat.com</a></td></tr><tr><td style="text-align:left">路径</td><td>/wxa-dev/testsource</td></tr><tr><td style="text-align:left">请求方法</td><td>POST</td></tr><tr><td style="text-align:left">入参</td><td>参数见下面</td></tr><tr><td style="text-align:left">返回</td><td>返回结果见下面</td></tr></tbody></table><h4 id="query参数："><a href="#query参数：" class="headerlink" title="query参数："></a>query参数：</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">_r</span>: <span class="string">'0.8530581592723374'</span>, <span class="comment">// 随机数</span></span><br><span class="line">  <span class="attribute">appid</span>: <span class="string">'xxx'</span>, <span class="comment">// 小程序appid</span></span><br><span class="line">  <span class="attribute">platform</span>:<span class="number">0</span>, <span class="comment">// 平台</span></span><br><span class="line">  <span class="attribute">ext_appid</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attribute">os</span>:<span class="string">'darwin'</span>,</span><br><span class="line">  <span class="attribute">clientversion</span>: <span class="string">'101171018'</span>,</span><br><span class="line">  <span class="attribute">gzip</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attribute">path</span>: <span class="string">'pages/home?'</span>,<span class="comment">// 预览页面的路径</span></span><br><span class="line">  <span class="attribute">newticket</span>: <span class="string">'jGUKNzQ59CI5yEoZRgmVP7P6PCnY1xaTv7QSdOXYoIM'</span>, <span class="comment">// 未知，该数据从登陆接口拿到</span></span><br><span class="line">  <span class="attribute">os</span>: <span class="string">'darwin'</span>, <span class="comment">// 系统</span></span><br><span class="line">  <span class="attribute">clientversion</span>: <span class="string">'1.01.171018'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"baseresponse"</span>: &#123;</span><br><span class="line"><span class="attr">"errcode"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"errmsg"</span>: <span class="string">"test source success."</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"qrcode_img"</span>: <span class="string">" base64 图片"</span>,</span><br><span class="line">    <span class="attr">"wxpkg_size"</span>: <span class="number">48269</span>,</span><br><span class="line"><span class="attr">"compile_time"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"widget_size"</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="上传接口"><a href="#上传接口" class="headerlink" title="上传接口"></a>上传接口</h1><table><thead><tr><th style="text-align:left">接口描述</th><th>上传小程序</th></tr></thead><tbody><tr><td style="text-align:left">域名</td><td><a href="https://servicewechat.com" target="_blank" rel="noopener">https://servicewechat.com</a></td></tr><tr><td style="text-align:left">路径</td><td>/wxa-dev/commitsource</td></tr><tr><td style="text-align:left">请求方法</td><td>POST</td></tr><tr><td style="text-align:left">入参</td><td>参数见下面</td></tr><tr><td style="text-align:left">返回</td><td>返回结果见下面</td></tr></tbody></table><h4 id="query-入参"><a href="#query-入参" class="headerlink" title="query 入参"></a>query 入参</h4><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attribute">_r</span>: <span class="string">'0.8530581592723374'</span>, <span class="comment">// 随机数</span></span><br><span class="line">  <span class="attribute">appid</span>: <span class="string">'xxx'</span>, <span class="comment">// 小程序appid</span></span><br><span class="line">  <span class="attribute">platform</span>:<span class="number">0</span>, <span class="comment">// 平台</span></span><br><span class="line">  <span class="attribute">ext_appid</span>: <span class="string">''</span>,</span><br><span class="line">  <span class="attribute">os</span>:<span class="string">'darwin'</span>,</span><br><span class="line">  <span class="attribute">clientversion</span>: <span class="string">'101171018'</span>,</span><br><span class="line">  <span class="string">"user-version"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="string">"user-desc"</span>: <span class="string">"xxx"</span>,</span><br><span class="line">  <span class="string">"uuid"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attribute">gzip</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attribute">newticket</span>: <span class="string">'jGUKNzQ59CI5yEoZRgmVP7P6PCnY1xaTv7QSdOXYoIM'</span>, <span class="comment">// 未知，该数据从登陆接口拿到</span></span><br><span class="line">  <span class="attribute">os</span>: <span class="string">'darwin'</span>, <span class="comment">// 系统</span></span><br><span class="line">  <span class="attribute">clientversion</span>: <span class="string">'1.01.171018'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"baseresponse"</span>: &#123;</span><br><span class="line"><span class="attr">"errcode"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"errmsg"</span>: <span class="string">"commit source success."</span></span><br><span class="line">&#125;,</span><br><span class="line">    <span class="attr">"wxpkg_size"</span>: <span class="number">48269</span>,</span><br><span class="line"><span class="attr">"compile_time"</span>: <span class="number">0</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="检查是否已经设置了预览版"><a href="#检查是否已经设置了预览版" class="headerlink" title="检查是否已经设置了预览版"></a>检查是否已经设置了预览版</h1><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="symbol">  protocol:</span> <span class="string">"https:"</span>,</span><br><span class="line"><span class="symbol">  host:</span> <span class="string">"servicewechat.com"</span>,</span><br><span class="line"><span class="symbol">  pathname:</span> <span class="string">"/wxa-dev-logic/getcommitqrcode"</span>,</span><br><span class="line"><span class="symbol">  query:</span> &#123;</span><br><span class="line"><span class="symbol">    _r:</span> <span class="string">"0.014995344596100635"</span>,</span><br><span class="line"><span class="symbol">    os:</span> <span class="string">"darwin"</span>,</span><br><span class="line"><span class="symbol">    clientversion:</span> <span class="string">"1011711300"</span>,</span><br><span class="line"><span class="symbol">    appid:</span> <span class="string">"xxx"</span>,</span><br><span class="line"><span class="symbol">    newticket:</span> <span class="string">"uVMVEwpFifCRfXjx53x9ORZsbn1X_ygFWl61kwaEeBg"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在2017年的时候就做了这个分析，一直没发出来。⚠️注意文中使用的ide版本是Mac 版的，ide version: 1.01.1711020，不推荐在生产环境中使用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h1&gt;&lt;p&gt;下载IDE版本：1.01.1711020&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;美化开发工具js代码：在js目录执行命令 &lt;code&gt;find . -type f -name &amp;#39;*.js&amp;#39; -exec js-beautify -r -s 2 -p -f &amp;#39;{}&amp;#39; \&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开针对IDE的调试工具：在./app.nw/js/core/index.js 第81行 init() 过后 加入以下代码：&lt;code&gt;nw.Window.get().showDevTools()&lt;/code&gt;;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在IDE源码中使用 &lt;code&gt;global.contentWindow.console.log&lt;/code&gt; 来打印变量&lt;/p&gt;
    
    </summary>
    
    
      <category term="小程序" scheme="http://lyan.me/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="小程序上传" scheme="http://lyan.me/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用shell命令从请求日志中分析pv、uv</title>
    <link href="http://lyan.me/2019/01/01/%E4%BD%BF%E7%94%A8shell%E5%91%BD%E4%BB%A4%E4%BB%8E%E8%AF%B7%E6%B1%82%E6%97%A5%E5%BF%97%E4%B8%AD%E5%88%86%E6%9E%90pv%E3%80%81uv/"/>
    <id>http://lyan.me/2019/01/01/使用shell命令从请求日志中分析pv、uv/</id>
    <published>2019-01-01T03:05:58.000Z</published>
    <updated>2022-09-24T01:55:55.154Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在日常工作中，我们经常要统计用户的访问量。<br>对于pv、uv的统计方式有很多，一般就是前端主动埋点，然后去相关的系统里面查看。<br>但有时候，前端可能忘记埋点，或者一些其它原因，导致拿不到pv、uv。这个时候，我们可以通过用户的请求日志中来分析出pv、uv。</p></blockquote><p>#准备<br>假如我们有如下日志，其中<strong><em>user_id</em></strong>为用户唯一id，那么就可以通过这个字段来统计UV。其实我们的需求就是匹配出每行日志中的user_id值，然后进行排序，去重，就可以拿到数量了。最简单的办法是通过正则匹配，在这篇文章里我们另辟蹊径。</p><a id="more"></a><p><strong>⚠️注意：如果生产环境日志量比较大，可以先把日志下载到本地再进行分析，避免在生产环境执行命令导致线上机器卡死</strong><br>out.log<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2019-01-07 23:56 +08:00: 200 'GET' '/v/1.0' 'serial=12312&amp;version=2050006&amp;ad=1231&amp;poiId=162912563&amp;poiName=%E5%9B%9B%E5%AD%A3%E5%A4%A7%E7%A2%97%E7%B2%A5&amp;user_id=161991&amp;source=android&amp;role=1&amp;f=android 'SPEND:' 0</span><br><span class="line">2019-01-07 23:57 +08:00: 200 'GET' '/v/1.0' 'serial=32332&amp;version=2050006&amp;ad=1231&amp;poiId=162912563&amp;poiName=%E5%9B%9B%E5%AD%A3%E5%A4%A7%E7%A2%97%E7%B2%A5&amp;user_id=161992&amp;source=android&amp;role=1&amp;f=android 'SPEND:' 0</span><br><span class="line">2019-01-07 23:58 +08:00: 200 'GET' '/v/1.0' 'serial=wrwer&amp;version=2050006&amp;ad=1231&amp;poiId=162912563&amp;poiName=%E5%9B%9B%E5%AD%A3%E5%A4%A7%E7%A2%97%E7%B2%A5&amp;user_id=161993&amp;source=android&amp;role=1&amp;f=android 'SPEND:' 0</span><br><span class="line">2019-01-07 23:59 +08:00: 200 'GET' '/v/1.0' 'serial=qweeq&amp;version=2050006&amp;ad=1231&amp;poiId=162912563&amp;poiName=%E5%9B%9B%E5%AD%A3%E5%A4%A7%E7%A2%97%E7%B2%A5&amp;user_id=161993&amp;source=android&amp;role=1&amp;f=android 'SPEND:' 0</span><br></pre></td></tr></table></figure></p><h1 id="Grep-命令"><a href="#Grep-命令" class="headerlink" title="Grep 命令"></a>Grep 命令</h1><p>命令格式：grep [option] pattern file</p><ul><li><p>第一步： 过了出out.log中对应接口的日志<br>代码如下，/v/1.0 是我的日志中http请求的某个path，我想统计每天还有多少用户在访问这个path</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep /v/<span class="number">1.0</span> <span class="keyword">out</span>.<span class="built_in">log</span></span><br></pre></td></tr></table></figure></li><li><p>第二步：从上面的结果中过滤出2019-01-07这天的数据，我们使用管道 | 符操作.</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep /v/<span class="number">1.0</span> out.log | grep <span class="number">2019</span><span class="number">-01</span><span class="number">-07</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="awk-命令"><a href="#awk-命令" class="headerlink" title="awk 命令"></a>awk 命令</h1><ul><li>第三步：使用awk -F 将每行日志以固定的字符串分割成多段, 类似于javascript中的.split 方法。在本示例中，以<strong><em>user_id=</em></strong>分割，’{print $2}’ 表示打印出第二段<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep /v/<span class="number">1.0</span> out.log | grep <span class="number">2019</span><span class="number">-01</span><span class="number">-07</span> | awk -F <span class="string">"user_id="</span> '&#123;print $<span class="number">2</span>&#125;'</span><br></pre></td></tr></table></figure></li></ul><p>结果如下<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">161991&amp;<span class="attribute">source</span>=android&amp;role=1&amp;f=android <span class="string">'SPEND:'</span> 0</span><br><span class="line">161992&amp;<span class="attribute">source</span>=android&amp;role=1&amp;f=android <span class="string">'SPEND:'</span> 0</span><br><span class="line">161993&amp;<span class="attribute">source</span>=android&amp;role=1&amp;f=android <span class="string">'SPEND:'</span> 0</span><br><span class="line">161993&amp;<span class="attribute">source</span>=android&amp;role=1&amp;f=android <span class="string">'SPEND:'</span> 0</span><br></pre></td></tr></table></figure></p><ul><li>第四步：再使用awk -F按&amp;符号分割日志，然后取第一个数据，也就是user_id的值。<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep /v/<span class="number">1.0</span> <span class="number">1.</span>log | grep <span class="number">2019</span><span class="number">-01</span><span class="number">-07</span> | awk -F <span class="string">"user_id="</span> '&#123;print $<span class="number">2</span>&#125;' | awk -F <span class="string">"&amp;"</span> '&#123;print $<span class="number">1</span>&#125;'</span><br></pre></td></tr></table></figure></li></ul><p>结果<br><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">161991</span></span><br><span class="line"><span class="number">161992</span></span><br><span class="line"><span class="number">161993</span></span><br><span class="line"><span class="number">161993</span></span><br></pre></td></tr></table></figure></p><ul><li>最后，也就是完整的命令，进行排序、去重，统计数量。<figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep /v/<span class="number">1.0</span> <span class="number">1.</span>log | grep <span class="number">2019</span><span class="number">-01</span><span class="number">-07</span> | awk -F <span class="string">"user_id="</span> '&#123;print $<span class="number">2</span>&#125;' | awk -F <span class="string">"&amp;"</span> '&#123;print $<span class="number">1</span>&#125;' | sort | uniq | wc -l</span><br></pre></td></tr></table></figure></li></ul><p>得到结果 3，即是我们想要的数据。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在日常工作中，我们经常要统计用户的访问量。&lt;br&gt;对于pv、uv的统计方式有很多，一般就是前端主动埋点，然后去相关的系统里面查看。&lt;br&gt;但有时候，前端可能忘记埋点，或者一些其它原因，导致拿不到pv、uv。这个时候，我们可以通过用户的请求日志中来分析出pv、uv。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;#准备&lt;br&gt;假如我们有如下日志，其中&lt;strong&gt;&lt;em&gt;user_id&lt;/em&gt;&lt;/strong&gt;为用户唯一id，那么就可以通过这个字段来统计UV。其实我们的需求就是匹配出每行日志中的user_id值，然后进行排序，去重，就可以拿到数量了。最简单的办法是通过正则匹配，在这篇文章里我们另辟蹊径。&lt;/p&gt;
    
    </summary>
    
    
      <category term="shell" scheme="http://lyan.me/tags/shell/"/>
    
      <category term="日志分析" scheme="http://lyan.me/tags/%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>mac命令行更改文件权限</title>
    <link href="http://lyan.me/2018/08/23/mac%E5%91%BD%E4%BB%A4%E8%A1%8C%E6%9B%B4%E6%94%B9%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/"/>
    <id>http://lyan.me/2018/08/23/mac命令行更改文件权限/</id>
    <published>2018-08-23T10:02:55.000Z</published>
    <updated>2022-09-24T01:55:55.152Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在开发一些系统应用的时候，有时候需要让用户输入电脑密码，然后我们拿到密码对系统进行操作。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  userpassword | sudo -S chmod 777 path-or-dir</span><br></pre></td></tr></table></figure><p>我们先知道了密码，然后在进行系统操作。是个什么场景呢？比如开发了一款更改hosts文件的小工具，但是更改hosts文件需要用户电脑密码授权。我们可以给用户弹个输入框接收密码，然后拿到密码就可以做各种操作了。</p><p>平常更改hosts文件的流程是：先进行了修改，然后系统提示你输入密码。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> child_process = <span class="built_in">require</span>(<span class="string">"child_process"</span>);</span><br><span class="line"><span class="keyword">const</span> prompt = <span class="built_in">require</span>(<span class="string">"prompt"</span>);</span><br><span class="line"></span><br><span class="line">prompt.start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> schema = &#123;</span><br><span class="line">  properties: &#123;</span><br><span class="line">    password: &#123;</span><br><span class="line">      description: <span class="string">"Enter your password"</span>,</span><br><span class="line">      replace: <span class="string">"*"</span>,</span><br><span class="line">      hidden: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">prompt.get(schema, (err, result) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">throw</span> err;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  child_process.exec(<span class="string">`echo <span class="subst">$&#123;result.password&#125;</span> | sudo -S chmod 777 ./src/test.js`</span>, (error, res) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="keyword">throw</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p> 更改过的文件权限信息如下</p><p><img src="https://upload-images.jianshu.io/upload_images/188895-4052a9df85929d40.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在开发一些系统应用的时候，有时候需要让用户输入电脑密码，然后我们拿到密码对系统进行操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
    
      <category term="mac" scheme="http://lyan.me/tags/mac/"/>
    
      <category term="shell" scheme="http://lyan.me/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>nvm安装多版本node</title>
    <link href="http://lyan.me/2018/06/12/nvm%E5%AE%89%E8%A3%85%E5%A4%9A%E7%89%88%E6%9C%ACnode/"/>
    <id>http://lyan.me/2018/06/12/nvm安装多版本node/</id>
    <published>2018-06-12T07:25:57.000Z</published>
    <updated>2022-09-24T01:55:55.153Z</updated>
    
    <content type="html"><![CDATA[<h1 id="install-nvm"><a href="#install-nvm" class="headerlink" title="install nvm"></a>install nvm</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash</span><br></pre></td></tr></table></figure><p>or</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.36.0/install.sh | bash</span><br></pre></td></tr></table></figure><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export NVM_DIR="$([ -z "$&#123;XDG_CONFIG_HOME-&#125;" ] &amp;&amp; printf %s "$&#123;HOME&#125;/.nvm" || printf %s "$&#123;XDG_CONFIG_HOME&#125;/nvm")"</span><br><span class="line">[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh" # This loads nvm</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;install-nvm&quot;&gt;&lt;a href=&quot;#install-nvm&quot; class=&quot;headerlink&quot; title=&quot;install nvm&quot;&gt;&lt;/a&gt;install nvm&lt;/h1&gt;&lt;figure class=&quot;highlight shell&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>echarts-扩展-toolbox</title>
    <link href="http://lyan.me/2017/07/01/echarts-%E6%89%A9%E5%B1%95-toolbox/"/>
    <id>http://lyan.me/2017/07/01/echarts-扩展-toolbox/</id>
    <published>2017-07-01T08:30:01.000Z</published>
    <updated>2022-09-24T01:55:55.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/ecomfe/echarts" target="_blank" rel="noopener">echarts</a>是百度前端团队推出的一个非常强大的开源图表库，我最近在重构的一个内部后台系统也用到了echarts，但是梳理老代码的时候发现有人居然改了<code>node_modules/echarts</code>里面的代码😢。梳理了一下功能，其实当时的需求就只想把“保存图片”的那个按钮的逻辑改为下载excel（也不知道为什么产品要在这个位置放导excel的按钮…）。</p><p><img src="http://upload-images.jianshu.io/upload_images/188895-d9b08ece2fe42010.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ecahrts中的toolbox"></p><a id="more"></a><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><p>我顺着echarts找到了toolbox模块，在<code>node_modules/lib/component/toolbox/feature</code> 下面有几个文件就是echarts toolbox已有的一些功能。发现几个功能都是需要实现同样一套接口来添加对应的按钮和功能，于是照葫芦画瓢，按照<code>SaveAsImage.js</code> 里面的代码实现一个类似的下载excel的工具。需要给class指定一个类属性<code>defaultOption</code>为默认配置，需要实现<code>onclick</code>方法。</p><p><strong>SaveAsExcel.js</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: lyan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>:   2017-06-30T12:40:29+08:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Email</span>:  liu-yaner<span class="doctag">@foxmail</span>.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: 扩展echarts 的tool box，增加导出excel功能</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境判断</span></span><br><span class="line"><span class="keyword">var</span> env = <span class="built_in">require</span>(<span class="string">'zrender/lib/core/env'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">SaveAsExcel</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(model) &#123;</span><br><span class="line">        <span class="keyword">this</span>.model = model;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">get</span> unusable() &#123;</span><br><span class="line">        <span class="keyword">return</span> !env.canvasSupported;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    onclick() &#123;</span><br><span class="line">        <span class="keyword">const</span> model = <span class="keyword">this</span>.model;</span><br><span class="line">        <span class="keyword">const</span> url = model.get(<span class="string">'url'</span>);</span><br><span class="line">        <span class="built_in">window</span>.open(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认配置</span></span><br><span class="line">SaveAsExcel.defaultOption = &#123;</span><br><span class="line">    show: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 功能图标，可以使用svg的path、可以是一张网络图片，如果是图片的话，需要加上image://前缀，比如icon: 'image://http://example.com/xxx.png'</span></span><br><span class="line">    icon: <span class="string">'M4.7,22.9L29.3,45.5L54.7,23.4M4.6,43.6L4.6,58L53.8,58L53.8,43.6M29.2,45.1L29.2,0'</span>,</span><br><span class="line">    title: <span class="string">'export'</span>,</span><br><span class="line">    url: <span class="string">'#'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 必须注册feature</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/toolbox/featureManager'</span>).register(</span><br><span class="line">   <span class="comment">// 功能名字   </span></span><br><span class="line">   <span class="string">'saveAsExcel'</span>,</span><br><span class="line">    SaveAsExcel</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>如果你要在项目中引入全量的echarts，需要在引入echarts之前 引入SaveAsExcel.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">'./yourPath/SaveAsExcel'</span>;</span><br><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts'</span>;</span><br><span class="line">....</span><br></pre></td></tr></table></figure></p><p>如果是<a href="http://echarts.baidu.com/tutorial.html#%E5%9C%A8%20webpack%20%E4%B8%AD%E4%BD%BF%E7%94%A8%20ECharts" target="_blank" rel="noopener">部分引入</a>, 则在引入toolbox之前 引入SaveAsExcel.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  引入 ECharts 主模块</span></span><br><span class="line"><span class="keyword">var</span> echarts = <span class="built_in">require</span>(<span class="string">'echarts/lib/echarts'</span>);</span><br><span class="line"><span class="comment">//  引入柱状图</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/chart/bar'</span>);</span><br><span class="line"><span class="comment">//  引入扩展的工具按钮</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./yourPath/SaveAsExcel'</span>);</span><br><span class="line"><span class="comment">// 引入toolbox</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'echarts/lib/component/toolbox'</span>);</span><br></pre></td></tr></table></figure></p><p>在业务代码里面使用<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> opt = &#123;</span><br><span class="line">    ...</span><br><span class="line">    toolbox: &#123;</span><br><span class="line">        feature: &#123;</span><br><span class="line">            <span class="comment">// 自定义的下载按钮</span></span><br><span class="line">            saveAsExcel: &#123;</span><br><span class="line">                url: <span class="string">`xxxx.jsp`</span>,</span><br><span class="line">                title: <span class="string">'下载'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>效果</p><p><img src="http://upload-images.jianshu.io/upload_images/188895-44ab5f1a4d63eafa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过这样的扩展方式，既实现了功能，也不会修改原有代码的功能，个人认为还是一种比较好的方式吧，如果需要更多更复杂的功能 ，其实都可以通过类似的方式来实现 ，当然这就需要对echarts源码吃透一点了。<br>由于笔者能力有限，如果文章中有哪里不对的地方，还请拍砖指正。希望本文对你有所帮助～～😊。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/ecomfe/echarts&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;echarts&lt;/a&gt;是百度前端团队推出的一个非常强大的开源图表库，我最近在重构的一个内部后台系统也用到了echarts，但是梳理老代码的时候发现有人居然改了&lt;code&gt;node_modules/echarts&lt;/code&gt;里面的代码😢。梳理了一下功能，其实当时的需求就只想把“保存图片”的那个按钮的逻辑改为下载excel（也不知道为什么产品要在这个位置放导excel的按钮…）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/188895-d9b08ece2fe42010.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;ecahrts中的toolbox&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://lyan.me/tags/javascript/"/>
    
      <category term="echarts" scheme="http://lyan.me/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>react-native实现transform-origin</title>
    <link href="http://lyan.me/2017/05/17/react-native%E5%AE%9E%E7%8E%B0transform-origin/"/>
    <id>http://lyan.me/2017/05/17/react-native实现transform-origin/</id>
    <published>2017-05-17T08:25:25.000Z</published>
    <updated>2022-09-24T01:55:55.153Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近在做RN项目的时候，有一个旋转效果需要指定非元素中心的原点。我们都知道在CSS3里进行transform变换的时候，默认的变换原点是元素的中心位置，css3提供了transform-origin属性来设置变换原点，但是在RN里，我翻遍了官方文档和一些源码都没有看到可以在设置类似transform-origin东西，但是RN的transform支持 matrix。</p></blockquote><h2 id="一个使用矩阵实现缩放的栗子"><a href="#一个使用矩阵实现缩放的栗子" class="headerlink" title="一个使用矩阵实现缩放的栗子"></a>一个使用矩阵实现缩放的栗子</h2><p>将图片旋转放大2倍，我们用matrix实现</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;View style=&#123;styles.container&#125;&gt;</span><br><span class="line">          &lt;Image style=&#123;[</span><br><span class="line">            styles.imageBox,</span><br><span class="line">            &#123;<span class="attr">transform</span>: [&#123;<span class="attr">matrix</span>: [</span><br><span class="line">                <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span>, <span class="number">2</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">                <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]&#125;]&#125;</span><br><span class="line">            ]&#125; </span><br><span class="line">            source=&#123;&#123;<span class="attr">uri</span>: <span class="string">'http://www.google.cn/landing/cnexp/google-search.png'</span>&#125;&#125; /&gt;</span><br><span class="line">      &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这个时候的效果就和使用scale(2) 一毛一样。</p><p>顺便提一下，话说在transform的matrix属性是在rn的某个版本中才加入的，更老的版本使用的是 <code>transformMatrix</code> 属性，它与transform平级。</p><h2 id="指定变换中心-transform-origin"><a href="#指定变换中心-transform-origin" class="headerlink" title="指定变换中心(transform-origin)"></a>指定变换中心(transform-origin)</h2><p>这里主要说明transform-origin的实现原理。其实transform-origin在css规范里面也有具体的说明。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">transform-origin</span>: <span class="number">50px</span> <span class="number">50px</span>; </span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>The <a href="https://www.w3.org/TR/css-transforms-1/#propdef-transform-origin" target="_blank" rel="noopener">transform-origin</a> property moves the point of origin by 50 pixels in both the X and Y directions. The transform rotates the element clockwise by 45° about the point of origin. After all transform functions were applied, the translation of the origin gets translated back by -50 pixels in both the X and Y directions.</p><p>也就是如下这幅图，出自<a href="https://www.w3.org/TR/css-transforms-1/#propdef-transform-origin" target="_blank" rel="noopener">这里</a><br><img src="http://upload-images.jianshu.io/upload_images/188895-9ed334e7f0fbe653.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css规范中的表述"></p><p>翻译一下就是，<strong><em>要想指定变换原点，其实只需要先把元素的中心平移到变换原点，然后开始变换，完了过后再反向平移到原来的位置。</em></strong></p><p>说得这么晦涩，什么变换啥的，其实矩阵变换对应到数学上就是进行矩阵乘法，不知道基础的同学建议先看看相关的知识，线性代数、基本图形变换之类的。</p><h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><p><a href="https://snack.expo.io/ByANEuKeZ" target="_blank" rel="noopener">代码在这里, 可在线预览</a>， 有可能需要科学上网才能访问到。<br>下面选取了部分关键代码说明一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 旋转中心</span></span><br><span class="line"><span class="keyword">const</span> transformOrigin = [<span class="number">50</span>, <span class="number">-50</span>];</span><br><span class="line"><span class="keyword">const</span> translate = [</span><br><span class="line">   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">   transformOrigin[<span class="number">0</span>], transformOrigin[<span class="number">1</span>], <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  ];</span><br><span class="line"><span class="keyword">const</span> unUseTranslate = [</span><br><span class="line">   <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">   -transformOrigin[<span class="number">0</span>], -transformOrigin[<span class="number">1</span>], <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  ];</span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">Math</span>.PI/<span class="number">6</span>;</span><br><span class="line"><span class="keyword">const</span> rotateMatrix = [</span><br><span class="line">   <span class="built_in">Math</span>.cos(a), <span class="built_in">Math</span>.sin(a), <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">  -<span class="built_in">Math</span>.sin(a), <span class="built_in">Math</span>.cos(a), <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>,            <span class="number">0</span>,          <span class="number">1</span>, <span class="number">0</span>,</span><br><span class="line">   <span class="number">0</span>,            <span class="number">0</span>,          <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果矩阵</span></span><br><span class="line"><span class="comment">// 先平移到旋转中心，再旋转</span></span><br><span class="line"><span class="keyword">let</span> m = Matrix.multMatrix(translate, rotateMatrix);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 再平移回去</span></span><br><span class="line">m = Matrix.multMatrix(m, unUseTranslate);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">  matrix: m</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p> 图片(容器)大小为100*100，我们如果要设置变换中心为图片的右上角的话，那么需要的旋转中心应该是 <code>transformOrigin = [50, -50]</code>; 这里为什么是<code>[50, -50]</code>呢？而不是像css属性里的是<code>transform-origin: 100px, 0</code>。 这是因为进行矩阵变换的时候，所应用的坐标系是元素的本地坐标系(local coordinate space)，图片的中心是<code>0,0</code>, x轴向右为正，y轴向下为正。所以此时图片的右上角所对应的坐标是(50, -50).如下图<br><img src="http://upload-images.jianshu.io/upload_images/188895-657c4e0eef524d83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="local coordinate space"></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>我这代码中的矩阵操作全是手动撸的，矩阵变换本来就是个麻烦而且枯燥的工作，所以如果大家在实际项目中需要用到各种矩阵操作的话，可以推荐 <a href="https://github.com/toji/gl-matrix" target="_blank" rel="noopener">gl-matrix</a> 这个库。react-native项目里面的话，可以直接使用 <a href="https://github.com/facebook/react-native/blob/master/Libraries/Utilities/MatrixMath.js" target="_blank" rel="noopener">MatrixMath</a> 模块。<br>如果深究一下css 的transform 文档，其实会发现所有的变换都可以用矩阵来表示，比如<code>perspective</code>，<code>perspective-origin</code>等属性。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近在做RN项目的时候，有一个旋转效果需要指定非元素中心的原点。我们都知道在CSS3里进行transform变换的时候，默认的变换原点是元素的中心位置，css3提供了transform-origin属性来设置变换原点，但是在RN里，我翻遍了官方文档和一些源码都没有看到可以在设置类似transform-origin东西，但是RN的transform支持 matrix。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一个使用矩阵实现缩放的栗子&quot;&gt;&lt;a href=&quot;#一个使用矩阵实现缩放的栗子&quot; class=&quot;headerlink&quot; title=&quot;一个使用矩阵实现缩放的栗子&quot;&gt;&lt;/a&gt;一个使用矩阵实现缩放的栗子&lt;/h2&gt;&lt;p&gt;将图片旋转放大2倍，我们用matrix实现&lt;/p&gt;
    
    </summary>
    
    
      <category term="react-native" scheme="http://lyan.me/tags/react-native/"/>
    
      <category term="transform" scheme="http://lyan.me/tags/transform/"/>
    
      <category term="matrix" scheme="http://lyan.me/tags/matrix/"/>
    
  </entry>
  
  <entry>
    <title>react-native制作新手引导组件</title>
    <link href="http://lyan.me/2017/02/26/react-native%E5%88%B6%E4%BD%9C%E6%96%B0%E6%89%8B%E5%BC%95%E5%AF%BC%E7%BB%84%E4%BB%B6/"/>
    <id>http://lyan.me/2017/02/26/react-native制作新手引导组件/</id>
    <published>2017-02-26T08:21:20.000Z</published>
    <updated>2022-09-24T01:55:55.153Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习了一下react-native zIndex 属属性的用法，在没有用它之前一直觉得这没啥嘛，以为就和css里面的z-index一样的, 用了才知道他们不尽相同，因为我最初想通过它来实现引导效果的。</p><p>现在完成的效果长这样：(请将就一下丑陋的demo页面…😊)</p><a id="more"></a><p>IOS:<br><img src="http://upload-images.jianshu.io/upload_images/188895-d85fe338dd7855a4.gif?imageMogr2/auto-orient/strip" alt="引导组件"><br>Android:<br><img src="http://upload-images.jianshu.io/upload_images/188895-242894bc2943ea04.gif?imageMogr2/auto-orient/strip" alt="2月-27-2017 20-00-05.gif"></p><p>使用方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">goup 代表分组，如果只有一类引导的话，可以不用管它。</span></span><br><span class="line"><span class="comment">step 标示第几个提示</span></span><br><span class="line"><span class="comment">content 是提示内容</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">import</span> Intro, &#123; intro &#125; <span class="keyword">from</span> <span class="string">'react-native-intro'</span>;</span><br><span class="line">&lt;Intro </span><br><span class="line">      content=<span class="string">"这是引导提示"</span></span><br><span class="line">      group=<span class="string">"test1"</span></span><br><span class="line">      step=&#123;<span class="number">1</span>&#125;&gt;</span><br><span class="line">    <span class="comment">// 其他组件</span></span><br><span class="line">&lt;<span class="regexp">/Intro&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 启动演示</span></span><br><span class="line"><span class="regexp">var myIntro = intro(&#123;group: 'yourGroup'&#125;);</span></span><br><span class="line"><span class="regexp">myIntro.start();</span></span><br></pre></td></tr></table></figure></p><p>但是还不支持 被Redux connect 包裹的组件….<br><a href="https://github.com/liuzheng644607/react-native-intro" target="_blank" rel="noopener">代码放在 github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习了一下react-native zIndex 属属性的用法，在没有用它之前一直觉得这没啥嘛，以为就和css里面的z-index一样的, 用了才知道他们不尽相同，因为我最初想通过它来实现引导效果的。&lt;/p&gt;
&lt;p&gt;现在完成的效果长这样：(请将就一下丑陋的demo页面…😊)&lt;/p&gt;
    
    </summary>
    
      <category term="react-native" scheme="http://lyan.me/categories/react-native/"/>
    
    
      <category term="react-native" scheme="http://lyan.me/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>react-native-setNativeProps-详解</title>
    <link href="http://lyan.me/2017/01/09/react-native-setNativeProps-%E8%AF%A6%E8%A7%A3/"/>
    <id>http://lyan.me/2017/01/09/react-native-setNativeProps-详解/</id>
    <published>2017-01-09T08:17:21.000Z</published>
    <updated>2022-09-24T01:55:55.153Z</updated>
    
    <content type="html"><![CDATA[<p>在React-Native里面，如果要改变组件的样式可以通过state 或者 props来做到。但有些时候由于性能瓶颈，不得不放弃通过触发render的方式来改样式，而是通过setNativeProps 来直接更改原生组件的样式属性 来达到相同的效果。如下图：<br><img src="http://upload-images.jianshu.io/upload_images/188895-23237343a6a4195b.gif?imageMogr2/auto-orient/strip" alt="header渐变效果"><br>上图中的header渐变和搜索框出现都是直通过setNativeProps来实现的。因为header要响应滚动事件，如果使用setState来实现的话，那么render会被频繁的触发，动画会比较卡顿，所以这种情况下，setNativeProps就能派上用场了。</p><a id="more"></a><p>实现图中的效果代码很简单，但是冗余代码比较多，所以就不拿来做示例了。下面的代码实现了一个Button组件，点击的时候改变背景色，这就是setNativeProps最常见的使用方式了。<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Button</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;<span class="type">View</span> ref=&#123;(c) =&gt; <span class="keyword">this</span>._refButton = c&#125; style=&#123;buttonStyles.button&#125;</span><br><span class="line">             onTouchStart=&#123;(e) =&gt; <span class="keyword">this</span>._onTouchStart(e)&#125;</span><br><span class="line">             onTouchEnd=&#123;(e) =&gt; <span class="keyword">this</span>._onTouchEnd(e)&#125;</span><br><span class="line">             &gt;</span><br><span class="line">                &lt;<span class="type">Text</span> style=&#123;buttonStyles.text&#125;&gt;&#123;<span class="keyword">this</span>.props.children&#125;&lt;/<span class="type">Text</span>&gt;</span><br><span class="line">            &lt;/<span class="type">View</span>&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _onTouchStart(e) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 这里直接操作style以达到效果</span></span><br><span class="line"><span class="comment">         * @type &#123;Object&#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">this</span>._refButton.setNativeProps(&#123;</span><br><span class="line">            style: &#123;backgroundColor: '#<span class="number">666</span>'&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    _onTouchEnd() &#123;</span><br><span class="line">        <span class="keyword">this</span>._refButton.setNativeProps(&#123;</span><br><span class="line">            style: &#123;backgroundColor: '#<span class="number">999</span>'&#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么我们究竟需要在何种情况下使用直接操作？在RN文档里是这样描述的：</p><blockquote><p>在（不得不）频繁刷新而又遇到了性能瓶颈的时候。<br>直接操作组件并不是应该经常使用的工具。一般来说只是用来创建连续的动画，同时避免渲染组件结构和同步太多视图变化所带来的大量开销。setNativeProps<br>是一个“简单粗暴”的方法，它直接在底层（DOM、UIView等）而不是React组件中记录state，这样会使代码逻辑难以理清。所以在使用这个方法之前，请尽量先尝试用setState<br>和<a href="http://facebook.github.io/react/docs/advanced-performance.html#shouldcomponentupdate-in-action" target="_blank" rel="noopener">shouldComponentUpdate</a>方法来解决问题。</p></blockquote><p>可以看出，setNativeProps有时候非常的好使，对于用惯了JQ的人来说简直就是福音…🐶🙄。但是我并没有在官方文档找到哪些属性可以用setNativeProps来操作，大家只是猜猜，嗯，style属性应该可以，于是乎就就用起来了。下面是我整理出来的可以直接操作的属性列表：<br><strong>View</strong></p><blockquote><p>pointerEvents<br>accessible<br>accessibilityLabel<br>accessibilityComponentType<br>accessibilityLiveRegion<br>accessibilityTraits<br>importantForAccessibility<br>testID<br>renderToHardwareTextureAndroid<br>shouldRasterizeIOS<br>onLayout<br>onAccessibilityTap<br>onMagicTap<br>collapsable<br>needsOffscreenAlphaCompositing<br><strong>style</strong></p></blockquote><p><strong>Text</strong><br>除了包含上面<strong>View</strong>的所有属性外还包括:</p><blockquote><p>isHighlighted<br>numberOfLines<br>ellipsizeMode<br>allowFontScaling<br>selectable<br>adjustsFontSizeToFit<br>minimumFontScale</p></blockquote><p><strong>Image</strong><br>包含<strong>View</strong>所有支持的属性， Android 与 IOS 略有不同。Android平台下，Image组件有children的时候 和 IOS支持的属性列表一样，如果Image没有children，那么它还包含如下属性：</p><blockquote><p>src<br>defaultSource<br>loadingIndicatorSrc<br>resizeMode<br>progressiveRenderingEnabled<br>fadeDuration<br>shouldNotifyLoadEvents</p></blockquote><p>其实上面这些东西都是在RN源码里面能找得到的，你要是不确定某个属性能否通过setNativeProps 设置的话，可以去对应组件的源码里面查看，它被封装在组件的viewConfig 属性里面。所以<code>node_modules/react-native/Libraries/Image/Image.ios.js</code> 里面有这样的代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Image = React.createClass(&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * `NativeMethodsMixin` will look for this when invoking `setNativeProps`. We</span></span><br><span class="line"><span class="comment">   * make `this` look like an actual native component class.</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  viewConfig: &#123;</span><br><span class="line">    uiViewClassName: <span class="string">'UIView'</span>,</span><br><span class="line">    validAttributes: ReactNativeViewAttributes.UIView</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">  render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">      &lt;RCTImageView</span><br><span class="line">        &#123;...this.props&#125;</span><br><span class="line">        style=&#123;style&#125;</span><br><span class="line">        resizeMode=&#123;resizeMode&#125;</span><br><span class="line">        tintColor=&#123;tintColor&#125;</span><br><span class="line">        source=&#123;sources&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>可以看出Image组件并没有把比较重要的prop <code>source</code> 没有被纳入到可被直接修改的列表中。在iOS 平台，RN暴露给我们的Image 是一个复合组件， 原生的<code>RCTImageView</code> 所接收的source 需要一个数组，而封装过的Image 需要的是一个Object， 使用setNativeProps会有点奇怪吧。还有在Android平台，<code>RKImage</code> 和  <code>RCTTextInlineImage</code>  需要的是src属性，也是一个数组。</p><p><strong>如果你非要使用setNativeProps来改变Image的source</strong>，可以像下面这样继承Image<br><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyImage</span> <span class="keyword">extends</span> <span class="title">Image</span> </span>&#123;</span><br><span class="line">    viewConfig = <span class="type">Object</span>.assign(&#123;&#125; , <span class="keyword">this</span>.viewConfig, &#123;</span><br><span class="line">        validAttributes: <span class="type">Object</span>.assign(</span><br><span class="line">            &#123;&#125;,</span><br><span class="line">            <span class="keyword">this</span>.viewConfig.validAttributes,</span><br><span class="line">            &#123;[<span class="type">Platform</span>.<span class="type">OS</span> === <span class="symbol">'io</span>s' ? <span class="symbol">'sourc</span>e' : <span class="symbol">'sr</span>c']: <span class="literal">true</span>&#125;)</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    constructor() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="keyword">this</span>.setNativeProps = (props = &#123;&#125;) =&gt; &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (props.source) &#123;</span><br><span class="line">                const source = resolveAssetSource(props.source);</span><br><span class="line">                let sourceAttr = <span class="type">Platform</span>.<span class="type">OS</span> === <span class="symbol">'io</span>s' ? <span class="symbol">'sourc</span>e' : <span class="symbol">'sr</span>c';</span><br><span class="line">                let sources;</span><br><span class="line">                <span class="keyword">if</span> (<span class="type">Array</span>.isArray(source)) &#123;</span><br><span class="line">                    sources = source;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    sources = [source];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="type">Object</span>.assign(props, &#123;[sourceAttr]: sources&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.setNativeProps(props);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 设置source</span></span><br><span class="line">   _setSource() &#123;</span><br><span class="line">        <span class="keyword">this</span>._refImg.setNativeProps(&#123;</span><br><span class="line">            source: &#123;uri: <span class="symbol">'https</span>:<span class="comment">//ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=2478206899,4000352250&amp;fm=80&amp;w=179&amp;h=119&amp;img.JPEG'&#125;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">         <span class="keyword">return</span>(</span><br><span class="line">            &lt;<span class="type">MyImage</span></span><br><span class="line">              ref=&#123;(c) =&gt; <span class="keyword">this</span>._refImg = c&#125;</span><br><span class="line">              style=&#123;styles.box&#125;</span><br><span class="line">              source=&#123;&#123;uri: <span class="symbol">'https</span>:<span class="comment">//ss0.baidu.com/6ONWsjip0QIZ8tyhnq/it/u=3497889018,3008123053&amp;fm=80&amp;w=179&amp;h=119&amp;img.JPEG'&#125;&#125; /&gt;</span></span><br><span class="line">         )  </span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <strong>但是，但是，但是</strong>，上面滴代码只是为了探讨一种方案，以及研究在RN里面setNativeProps是如何工作的，我们是 <strong>不可能</strong> 真正在项目中使用的，仅仅是学习之用。 既然都继承了一个新的类， 为什么自定义一个组件来实现想要的功能呢，用setState多方便。</p><p>对于setNativeProps 和 react 推崇的思想之间的矛盾，我觉得他们是可以共存的。 对于不同的业务/技术 场景 ，选择更适合的就是最好的。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在React-Native里面，如果要改变组件的样式可以通过state 或者 props来做到。但有些时候由于性能瓶颈，不得不放弃通过触发render的方式来改样式，而是通过setNativeProps 来直接更改原生组件的样式属性 来达到相同的效果。如下图：&lt;br&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/188895-23237343a6a4195b.gif?imageMogr2/auto-orient/strip&quot; alt=&quot;header渐变效果&quot;&gt;&lt;br&gt;上图中的header渐变和搜索框出现都是直通过setNativeProps来实现的。因为header要响应滚动事件，如果使用setState来实现的话，那么render会被频繁的触发，动画会比较卡顿，所以这种情况下，setNativeProps就能派上用场了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="react-native" scheme="http://lyan.me/tags/react-native/"/>
    
      <category term="setNativeProps" scheme="http://lyan.me/tags/setNativeProps/"/>
    
  </entry>
  
  <entry>
    <title>Javascript Decorators 初探</title>
    <link href="http://lyan.me/2017/01/04/Javascript-Decorators-%E5%88%9D%E6%8E%A2/"/>
    <id>http://lyan.me/2017/01/04/Javascript-Decorators-初探/</id>
    <published>2017-01-04T13:54:36.000Z</published>
    <updated>2022-09-24T01:55:55.152Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/188895-bb0a965e2fb5aded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="javascript decorator"></p><blockquote><p>现在什么 <strong>AOP</strong> 编程在前端领域越来越被大家追捧，所以我也来探究一下如何在javascript中进行AOP编程。 装饰器无疑是对AOP最有力的设计，在es5 时代，可以通过 <code>Object.defineProperty</code>来对对象属性／方法 进行访问修饰，但用起来需要写一堆东西。现在decorator已经在ES7的提案中了，借助Babel等转码工具，我们现在也能在javascript中使用装饰器语法了！<br><a id="more"></a></p></blockquote><h4 id="什么是Decorator"><a href="#什么是Decorator" class="headerlink" title="什么是Decorator"></a>什么是Decorator</h4><p>decorator 也叫装饰器(装潢器)。它可以在不侵入到原有代码内部的情况下而通过标注的方式修改类代码行为，装饰器对代码行为的改变是在编译阶段完成的，而不是在执行阶段。虽然Decorator还处在ES7草案阶段，但是我们可以通过Babel来转换es7代码，所以大家还是可以愉快的使用decorator。<br>在ES7提案中，Decorator的描述如下：</p><blockquote><ul><li>an expression</li><li>that evaluates to a function</li><li>that takes the target, name, and decorator descriptor as arguments</li><li>and optionally returns a decorator descriptor to install on the target object.<br>出自 <a href="https://github.com/wycats/javascript-decorators" target="_blank" rel="noopener">https://github.com/wycats/javascript-decorators</a></li></ul></blockquote><p>在代码层面，Decorator其实就是一个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readonly</span>(<span class="params">target, name, desc</span>) </span>&#123;</span><br><span class="line">  desc.writable = <span class="literal">false</span>;</span><br><span class="line">  <span class="keyword">return</span> desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o = &#123;</span><br><span class="line">  @readonly  <span class="comment">// 标识为只读属性</span></span><br><span class="line">  name: <span class="string">'liuyan'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 赋值失败并报错</span></span><br><span class="line">o.name = <span class="string">'liuzheng'</span>; <span class="comment">// Cannot assign to read only property 'name' of object '#&lt;Object&gt;'</span></span><br></pre></td></tr></table></figure><p>上面的代码实现了一个简单的装饰器用来使对象属性只读。函数<code>readonly</code> 规定了装饰器描述符的行为。不难看出，这和ES5中的 <code>Object.defineProperty</code> 方法很类似，使用es5<br>代码一样能够实现相同的功能，其实使用Babel转码最终也就是转换成了<code>Object.defineProperty</code> 的实现形式，只是使用  <code>@readonly</code> 这种语法更能直观的描述出来， 对比Java中的注解、 Python中的装饰器其实都使用类似的语法。</p><h4 id="Decorator用法"><a href="#Decorator用法" class="headerlink" title="Decorator用法"></a>Decorator用法</h4><p><strong>给属性添加Decorator</strong><br>和前面的例子一样，有时候需要在JS中实现类静态成员，这个时候就可以使用Decorator来修饰了,代码如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  @readonly</span><br><span class="line">  <span class="keyword">static</span> MIN_AGE = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，当不小心重新为 Person.MIN_AGE 赋值的时候，就会抛出错误。</p><p><strong>给方法添加Decorator</strong><br>也可以对方法进行装饰。比如现在需要实现一个功能： 设计一个装饰器，它能够统计出一个异步方法(这里只用Promise)的耗时。还是以Person类为例，给Person增加一个request方法，统计request执行耗时，代码实现非常简单：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> MIN_AGE = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  @duration</span><br><span class="line">  request() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">         resolve(&#123;<span class="attr">status</span>: <span class="number">0</span>&#125;)</span><br><span class="line">       &#125;, <span class="number">3000</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 装饰器</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">duration</span>(<span class="params">target, key, desc</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; value &#125; = desc;</span><br><span class="line">  <span class="keyword">let</span> _time = <span class="built_in">Date</span>.now();</span><br><span class="line">  desc.value = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = value.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    <span class="keyword">if</span> (res &amp;&amp; <span class="keyword">typeof</span> res.then === <span class="string">'function'</span>) &#123;</span><br><span class="line">      res.then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>() ==&gt; 耗时:<span class="subst">$&#123;<span class="built_in">Date</span>.now() - _time&#125;</span>ms`</span>);</span><br><span class="line">      &#125;, () =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>() ==&gt; 耗时:<span class="subst">$&#123;<span class="built_in">Date</span>.now() - _time&#125;</span>ms`</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;key&#125;</span>() ==&gt; 耗时:<span class="subst">$&#123;<span class="built_in">Date</span>.now() - _time&#125;</span>ms`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 需要把描述对象返回</span></span><br><span class="line">  <span class="keyword">return</span> desc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始</span></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'liuyan'</span>);</span><br><span class="line">p.request(); <span class="comment">// 输出:  request() ==&gt; 耗时:3002ms</span></span><br></pre></td></tr></table></figure></p><p><strong>作用于class</strong><br>也可以在为class 应用装饰器，现在我要通过装饰器给Person类增加一个静态属性IS_PERSON; (当然，这没什么卵用…)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 增加静态属性IS_PERSON</span></span><br><span class="line">@isPerson</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPerson</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  target.IS_PERSON = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.IS_PERSON); <span class="comment">// true</span></span><br></pre></td></tr></table></figure></p><p>也可以作用于class的实例属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> &#123;sayHi&#125; = target.prototype;</span><br><span class="line">  target.prototype.sayHi = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> sayHi === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> res = sayHi.apply(<span class="keyword">this</span>, args);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Hi, I\'m <span class="subst">$&#123;<span class="keyword">this</span>.name&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'liuyan'</span>);</span><br><span class="line">p.sayHi(); <span class="comment">// Hi, I'm liuyan</span></span><br></pre></td></tr></table></figure></p><p>decorator作用于类最常见的用法就是mixins了，mixin 也就是允许我们为组件(类) 附加额外的功能，用过react的童鞋应该对mixin不陌生，不过使用mixin扩展新功能这种用法已经<a href="https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750#.5hx3ugz68" target="_blank" rel="noopener">不被推荐</a>了。<br>decorator已经在各知名框架中开始大面积使用，比如Angular2（ng2）, 虽然ng2使用TypeScript 来构建的，但是装饰器这种语法实现也是大同小异的。下图是从angular js官网截取的示例代码：</p><p><img src="http://upload-images.jianshu.io/upload_images/188895-ef577d24f7fa9332.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Angular2中，大量使用了decorator"></p><h4 id="实际使用场景（Logger）"><a href="#实际使用场景（Logger）" class="headerlink" title="实际使用场景（Logger）"></a>实际使用场景（Logger）</h4><p>一个东西被吹得再好，如果没有使用场景那也是白搭。<br>在实际业务中，很多时候把装饰器用在日志工具上面，因为日志这种东西和业务几乎是完全分离的，试想一下，如果业务代码里面参杂了各种各样的日志信息…., 对于阅读代码逻辑以及维护来说都是灾难性的，这个时候我们的decorator就能派上用场了。<br>假设需要实现一个对定时任务的监控logger， 需要监控何时开始、结束，以及任务运行耗时的信息。代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScheduleJob</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(name) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line">  @log(<span class="string">'info'</span>, <span class="string">'开始'</span>)</span><br><span class="line">  start() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.stop();</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  @log(<span class="string">'info'</span>, <span class="string">'结束'</span>)</span><br><span class="line">  stop() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> job = <span class="keyword">new</span> ScheduleJob(<span class="string">'liuyan'</span>);</span><br><span class="line">job.start();</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出: </span></span><br><span class="line"><span class="comment">//Thu Jan 05 2017 18:34:09 GMT+0800 (CST) - info - 开始 </span></span><br><span class="line"><span class="comment">//Thu Jan 05 2017 18:34:09 GMT+0800 (CST) - info - 开始....time: 1483612449481</span></span><br><span class="line"><span class="comment">//Thu Jan 05 2017 18:34:12 GMT+0800 (CST) - info - 结束 </span></span><br><span class="line"><span class="comment">//Thu Jan 05 2017 18:34:12 GMT+0800 (CST) - info - 结束....time: 1483612452258，耗时：2777ms </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">t = <span class="string">'info'</span>, msg = <span class="string">''</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">target, name, desc</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123;value&#125; = desc;</span><br><span class="line">    </span><br><span class="line">    desc.value = <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span> - <span class="subst">$&#123;t&#125;</span> - <span class="subst">$&#123;msg&#125;</span> `</span>)</span><br><span class="line">      <span class="keyword">let</span> res = value.apply(<span class="keyword">this</span>, args);</span><br><span class="line">      <span class="keyword">if</span>(name === <span class="string">'start'</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">`startTime`</span>] = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span> - <span class="subst">$&#123;t&#125;</span> - 开始....time: <span class="subst">$&#123;<span class="keyword">this</span>[<span class="string">`startTime`</span>]&#125;</span>`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>( name === <span class="string">'stop'</span> ) &#123;</span><br><span class="line">        <span class="keyword">this</span>[<span class="string">`endTime`</span>] = <span class="built_in">Date</span>.now();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span> - <span class="subst">$&#123;t&#125;</span> - 结束....time: <span class="subst">$&#123;<span class="keyword">this</span>[<span class="string">`endTime`</span>]&#125;</span>，耗时：<span class="subst">$&#123;<span class="keyword">this</span>[<span class="string">`endTime`</span>] - <span class="keyword">this</span>[<span class="string">`startTime`</span>]&#125;</span>ms`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的是一个很简单的需求，我们没有修改原有类的任何代码就实现了日志监控。其实这种实现在编程器思想里面叫做 AOP，中文名也叫面向切面编程，java里面用得非常之多。</p><p>网上有牛人写了一些常用的decorators  <a href="https://github.com/jayphelps/core-decorators.js" target="_blank" rel="noopener">core-decorators</a>，源码比较简单，可以学习学习。</p><p>####参考资料<br>decorator描述: <a href="https://github.com/wycats/javascript-decorators" target="_blank" rel="noopener">https://github.com/wycats/javascript-decorators</a><br>core-decorators.js   <a href="https://github.com/jayphelps/core-decorators.js" target="_blank" rel="noopener">https://github.com/jayphelps/core-decorators.js</a><br>decorators 文档  <a href="http://tc39.github.io/proposal-decorators/" target="_blank" rel="noopener">http://tc39.github.io/proposal-decorators/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/188895-bb0a965e2fb5aded.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;javascript decorator&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;现在什么 &lt;strong&gt;AOP&lt;/strong&gt; 编程在前端领域越来越被大家追捧，所以我也来探究一下如何在javascript中进行AOP编程。 装饰器无疑是对AOP最有力的设计，在es5 时代，可以通过 &lt;code&gt;Object.defineProperty&lt;/code&gt;来对对象属性／方法 进行访问修饰，但用起来需要写一堆东西。现在decorator已经在ES7的提案中了，借助Babel等转码工具，我们现在也能在javascript中使用装饰器语法了！&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://lyan.me/tags/javascript/"/>
    
      <category term="decorator" scheme="http://lyan.me/tags/decorator/"/>
    
  </entry>
  
  <entry>
    <title>react-native使用</title>
    <link href="http://lyan.me/2016/07/07/react-native%E4%BD%BF%E7%94%A8/"/>
    <id>http://lyan.me/2016/07/07/react-native使用/</id>
    <published>2016-07-07T10:46:34.000Z</published>
    <updated>2022-09-24T01:55:55.153Z</updated>
    
    <content type="html"><![CDATA[<p>使用react-native也有一段时间了，这个框架使用起来还是有利有弊的。 首先来说web开发者用rn写native app 还是很方便的，至少不用为iOS， android写两套代码，如果开发者有reactjs开发经验的话，那学习成本又降低了不少。其实在RN 应用里还是会不可避免的写区分平台的代码，但这基本上已经降低到需求层面了，所以不是什么大问题，我们知道rn官方提供的某些组件是有平台区分的，所以我们在选用官方组件的时候应该尽量避免有平台差异的组件或者功能，除非你的需求就是要在不通平台上面展示不同的组件。<br>下面纪录一些我在项目中遇到的问题以及解决办法:</p><a id="more"></a><h2 id="多个相同ScrollView同步滚动位置的问题"><a href="#多个相同ScrollView同步滚动位置的问题" class="headerlink" title="多个相同ScrollView同步滚动位置的问题"></a>多个相同ScrollView同步滚动位置的问题</h2><p>现在有这样一个需求，在页面上有一个横向菜单导航，菜单项可能会非常多，所以需要支持横向滚动，于是第一时间就想到了使用ScrollView这个组件，设置props <code>horizontal={true}</code> 即可实现横向滚动，然后设置 <code>showsHorizontalScrollIndicator={false}</code> 把横向滚动条给隐藏掉，好像已经实现了这个需求了。但此时 pm说，我要在页面滚动的时候菜单栏要吸顶(就是一直在页面视口的顶端一直展示)，于是又开始折腾菜单吸顶功能。因为这个菜单栏是被包裹在页面的ListView容器中的，所以第时间想到了使用ListView的 renderSectionHeader功能，但是一查文档发现只有IOS支持这个属性，无奈只能自己实现。平常做吸顶功能的时候我们都是Clone一个容器来吸顶，在页面滑动到合适的位置的时候将吸顶元素展现出来，所以在react中也是同样的道理。 把菜单栏做成一个组件，吸顶元素弄一个单独的容器来放着歌菜单栏组件，也是在合适的时机展现这个元素就行了。 菜单数据使用全局store中对应的state，这样能方便的实现菜单栏组件状态的同步（比如菜单项选中状态啥的）。这里有一个问题就是横向菜单滚动同步的问题，因为是两个容器，所以需要让两个菜单的横向滚动位置保持一致。 <code>contentOffset</code> 可以实现给ScrollView设置指定的滚动位置，我看文档上面说这个属性只有IOS才支持，但我试验过后发现android也可以设置。在这个过程中发现一个问题就是，scrollView的contentOffset属性只有在第一次设置才生效，后续的动态设置是不会生效的。最终是使用scrollTo方法来让ScrollView滚动到指定的位置。但是我应该在哪个时候同步滚动距离到两个ScrollView上？是用onScroll属性吗？并不是，使用onScroll属性触发的频率太高了，当然不能这样搞。我需要的是滚动停止过后把当前ScrollView的offset同步到另一个就可以了，看源码发现了 <code>onMomentumScrollEnd</code> 属性，onMomentumScrollEnd是在ScrollView 滚动完成过后触发的事件，IOS，Android都支持该属性的，只是我没有看到在文档中写出来。<br>这时候发现问题似乎解决了～，咦？我刚用手指拉动ScrollView（注意是拉动，生硬的放开，不是滑动），位置怎么没有同步呢？发现它根本没有触发 onMomentumScrollEnd 事件！最后加上了个监听ScrollView的 <code>onScrollEndDrag</code> 事件来实现。总体实现就像下面这样：(代码中使用了redux)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NavList</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    componentDidUpdate() &#123;</span><br><span class="line">        <span class="keyword">this</span>.refs.navListScroll &amp;&amp; <span class="keyword">this</span>.refs.navListScroll.scrollTo(&#123;</span><br><span class="line">            x: <span class="keyword">this</span>.props.offsetX,</span><br><span class="line">            animated: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    _syncOffset(e) &#123;</span><br><span class="line">        <span class="keyword">let</span> x = e.nativeEvent.contentOffset.x;</span><br><span class="line">        <span class="keyword">this</span>.props.offsetChange(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;ScrollView</span><br><span class="line">                ref=<span class="string">"navListScroll"</span></span><br><span class="line">                onScrollEndDrag=&#123;(e) =&gt; <span class="keyword">this</span>._syncOffset(e)&#125;</span><br><span class="line">                onMomentumScrollEnd=&#123;(e) =&gt; <span class="keyword">this</span>._syncOffset(e)&#125;</span><br><span class="line">            &gt;</span><br><span class="line">            &lt;<span class="regexp">/ScrollView&gt;</span></span><br><span class="line"><span class="regexp">            )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><h2 id="dispatch多个action的时候尽量合并"><a href="#dispatch多个action的时候尽量合并" class="headerlink" title="dispatch多个action的时候尽量合并"></a>dispatch多个action的时候尽量合并</h2><p>用过redux的同学应该知道，我们要改变store中的state的时候是通过触发对应的action来叼用对应的reducer来完成的。有时候我们可能会在某一段程序里需要改变多个state值，也就是要dispatch 多个 action. 我们知道触发action更行state会触发对应 的view 的render 方法的，如果我们同时更新多个，那么久会触发UI的多处更新。于是合并多个action就显得比较重要了，一个实际的例子是，当一个请求回来的时候，我们很有可能会触发N多的action以更新UI。<br>具体做法如下：<br>1.在action中写一个专门用于合并 操作的action, (types里面是各种action常量)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> mergeAction = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        type: types.MERGE_ACTION,</span><br><span class="line">        payload: params</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>2.在reducer中类似于这样写reducer创建函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reducerInstance;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createReducer(initialState, reducerInstance = &#123;</span><br><span class="line">    [ActionTypes.MERGE_ACTION](state, &#123;</span><br><span class="line">        payload</span><br><span class="line">    &#125;) &#123;</span><br><span class="line">        payload &amp;&amp; payload.forEach(<span class="function">(<span class="params">v</span>)=&gt;</span>&#123;</span><br><span class="line">            state = reducerInstance[v.type].call(<span class="keyword">this</span>, state, v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> state;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><ol start="3"><li>使用</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> actions = [];</span><br><span class="line">actions.push(changeLoading(<span class="literal">false</span>));</span><br><span class="line">action.push(changeNavList(data.navList));</span><br><span class="line">...</span><br><span class="line">dispatch(mergeAction(actions));</span><br></pre></td></tr></table></figure><h2 id="获取页面元素大小，位置"><a href="#获取页面元素大小，位置" class="headerlink" title="获取页面元素大小，位置"></a>获取页面元素大小，位置</h2><p>在rn中，我们想要获取一个元素在页面中的位置,大小的话，可以使用组件 <code>measure</code> ， 以及 <code>measureLayout</code> 方法。 这两个方法的具体使用方式在<a href="http://reactnative.cn/docs/0.28/nativemethodsmixin.html#content" target="_blank" rel="noopener">measure和measureLayout</a>. 需要注意的是你只能在原生的组件上面使用这些方法，不能🐶在复合组件中使用。比如你能在View上面使用，而你不能在自己写的组件NavList 上面使用该方法。 measure 之类的方法需要配合元素的onLayout属性才能正确的获得想要的结果，不能想当然的在元素didMount的时候试图去获取一个元素的大小，位置。此外，如果只想获取元素的大小的话，可以在元素onLayout的时候得到如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">onLayout(e) &#123;</span><br><span class="line">    <span class="comment">// 得到元素的宽高</span></span><br><span class="line">    <span class="keyword">let</span> &#123; width, height &#125; = e.nativeEvent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>有一点不爽的是😫，在rn里面计算元素位置之类的功能是异步的，这对于开发者来说是不怎么方便的。在做web开发的时候我们只需要访问一个元素的宽高属性就可以获取，这是相当方便的。</p><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>动画功能是app交互中的一大利器，幸运的是，rn提供了丰富的动画处理类，主要有两个， <code>Animated</code> 和  <code>LayoutAnimation</code> ，两者的使用方式有着很大的区别。可以使用 <code>Animated</code> 创建出许多复杂的交互动画，自定义程度是非常高的。 <code>LayoutAnimation</code> 顾名思义就是布局动画，当布局变化的时候，rn自动的将视图运动到新的位置上去，这个功能非常酷，不需要手动的写动画运动代码，最简单的使用方式是在render之前配置一个 <code>LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut)</code> 即可，在该组件重新布局的时候，它会有一个缓动效果。但是比较遗憾   <em>LayoutAnimation 只能在 <code>IOS</code> 平台使用</em>.<br>Animated的使用方式相对比较复杂，但是也能简单的使用。我在项目中使用得最多的也就是Animated.timing 😳，因此不再多说，找时间研究一下。</p><h3 id="为Image组件设置默认图片"><a href="#为Image组件设置默认图片" class="headerlink" title="为Image组件设置默认图片"></a>为Image组件设置默认图片</h3><p>这个可以不必多说，自己把Image组件包裹一层就行了。 这里需要注意的是图片的加载问题，在一个页面上我们可能会有比较多的图片，需要做的是当图片出现在当前视口的时候才加载该图片，否则就显示一个默认的占位图，这功能在大多数手机上是OK的，但是在iPhone4s上面，页面刚渲染就崩溃，究其原因就是渲染图片惹的祸，即使你多个容器都是渲染的同一个图片。因此，我们只能在iPhone4s上面不展示默认图了…, 虽然这样比较挫，但至少不会让app崩溃了。</p><h3 id="异步回调导致的崩溃…"><a href="#异步回调导致的崩溃…" class="headerlink" title="异步回调导致的崩溃…"></a>异步回调导致的崩溃…</h3><p>这个问题其实应该挺常见的，不过怪我忘了给回调加保险。就是上面封装的默认图片站位组件，我们把它叫做CustomImage吧。CustomImage在真实图片加载完成的时候会把默认移除，在移除的时候有一个渐变动画。等渐变动画完全完成的时候（也就是默认图片的opacity值为0）把默认图片给移除，也就是我在回调里面进行了 setState({loading: false}) 操作。此时当图片还在加载过程中的时候用户点击了返回，返回到首页去，那么app就崩溃了。为什么？因为回调函数执行了，它发现在一个unmount的元素上进行了setState. 因此crash。其实找出这个错误还费了一点功夫，报错并不是那么的清晰。最后在组件里面进行了判断，判断当前组件有没有被unmount。做法就是在componentWillUnmount 方法里做一个标志 this._unmount = true;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>._unmount) &#123;</span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="样式问题"><a href="#样式问题" class="headerlink" title="样式问题"></a>样式问题</h3><p>待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用react-native也有一段时间了，这个框架使用起来还是有利有弊的。 首先来说web开发者用rn写native app 还是很方便的，至少不用为iOS， android写两套代码，如果开发者有reactjs开发经验的话，那学习成本又降低了不少。其实在RN 应用里还是会不可避免的写区分平台的代码，但这基本上已经降低到需求层面了，所以不是什么大问题，我们知道rn官方提供的某些组件是有平台区分的，所以我们在选用官方组件的时候应该尽量避免有平台差异的组件或者功能，除非你的需求就是要在不通平台上面展示不同的组件。&lt;br&gt;下面纪录一些我在项目中遇到的问题以及解决办法:&lt;/p&gt;
    
    </summary>
    
    
      <category term="react-native" scheme="http://lyan.me/tags/react-native/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaScript构建一个3D引擎</title>
    <link href="http://lyan.me/2016/03/13/%E4%BD%BF%E7%94%A8JavaScript%E6%9E%84%E5%BB%BA%E4%B8%80%E4%B8%AA3D%E5%BC%95%E6%93%8E/"/>
    <id>http://lyan.me/2016/03/13/使用JavaScript构建一个3D引擎/</id>
    <published>2016-03-13T01:08:43.000Z</published>
    <updated>2022-09-24T01:55:55.154Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在web页面中展示图片或者其他平面图形是很容易的。但是当涉及到展示3D图形时就显得不是那么的容易了，因为3D几何体比2D的更为复杂。要做到这一点的话，你可以使用专门的技术和库比如<a href="https://en.wikipedia.org/wiki/WebGL" target="_blank" rel="noopener">webGL</a>和<a href="http://threejs.org/" target="_blank" rel="noopener">three.js</a>来实现。<br>当然，如果你只是想显示一些基本的形状(比如立方体)，这些技术并不是必须的。并且，这些技术和库并不能帮助你理解它们是如何生效的以及我们应该怎样在屏幕上绘制3D形状。<br>本教程的目的是教我们在web中并且不使用webGL技术应该如何够制作一个简单的3D引擎。首先，我们看看如何来存储3D形状，然后，我们分别在两种视图中如何来显示这些形状。</p></blockquote><a id="more"></a><h1 id="存储和改变3D图形"><a href="#存储和改变3D图形" class="headerlink" title="存储和改变3D图形"></a>存储和改变3D图形</h1><h3 id="所有的形状都是多面体"><a href="#所有的形状都是多面体" class="headerlink" title="所有的形状都是多面体"></a>所有的形状都是多面体</h3><p>虚拟世界与现实世界主要的不同之处在于: 没有什么是连续的，一切都是离散的。例如，你不能在屏幕上绘制一个完美的圆，你可以画一个有很多条边的正多边形去无限接近一个圆，正多边形的边越多，则你想要画的那个圆就越完美。<br>[TODO]<br>In 3D, it’s the same thing and every shape must be approached with the 3D equivalent of a polygon: a <a href="https://en.wikipedia.org/wiki/Polyhedron" target="_blank" rel="noopener">polyhedron</a> (a 3D shape in which we only find flat faces ant not curved sides as in a sphere). It’s not surprising when we talk about a shape that is already a polyhedron, like a cube, but it’s something to keep in mind when we want to display other shapes, like a sphere.<br><img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1454758145sphere.png" alt="图示"></p><h3 id="存储一个多面体"><a href="#存储一个多面体" class="headerlink" title="存储一个多面体"></a>存储一个多面体</h3><p>想要存储一个多面体, 还记得在数学中我们是怎样来标示的。我们在学校学过一些基本的几何图形，为了表示一个正方形，我们把它叫做ABCD ,使用A，B，C，D来表示四个顶点以构成一个正方形。</p><p>对于我们的3D引擎也是一样的,我们将首先存储形状的每个顶点，然后这个形状将列出它的每个面，并且每个面将列出其顶点。</p><p>我们需要有一个合适的结构来表示一个顶点，在这里，我们创建了一个类来保存顶点坐标。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Vertex = <span class="function"><span class="keyword">function</span>(<span class="params">x, y, z</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">parseFloat</span>(x);</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="built_in">parseFloat</span>(y);</span><br><span class="line">    <span class="keyword">this</span>.z = <span class="built_in">parseFloat</span>(z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，我们可以使用任何一个对象来表示一个顶点了,就像下面这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="keyword">new</span> Vertex(<span class="number">10</span>, <span class="number">20</span>, <span class="number">0.5</span>);</span><br></pre></td></tr></table></figure><p>接下来，创建一个class来表示多面体.以立方体为例.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Cube = <span class="function"><span class="keyword">function</span>(<span class="params">center, size</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//创建顶点</span></span><br><span class="line">    <span class="keyword">var</span> d = size / <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.vertices = [</span><br><span class="line">        <span class="keyword">new</span> Vertex(center.x - d, center.y - d, center.z + d),</span><br><span class="line">        <span class="keyword">new</span> Vertex(center.x - d, center.y - d, center.z - d),</span><br><span class="line">        <span class="keyword">new</span> Vertex(center.x + d, center.y - d, center.z - d),</span><br><span class="line">        <span class="keyword">new</span> Vertex(center.x + d, center.y - d, center.z + d),</span><br><span class="line">        <span class="keyword">new</span> Vertex(center.x + d, center.y + d, center.z + d),</span><br><span class="line">        <span class="keyword">new</span> Vertex(center.x + d, center.y + d, center.z - d),</span><br><span class="line">        <span class="keyword">new</span> Vertex(center.x - d, center.y + d, center.z - d),</span><br><span class="line">        <span class="keyword">new</span> Vertex(center.x - d, center.y + d, center.z + d)</span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建面</span></span><br><span class="line">    <span class="keyword">this</span>.faces = [</span><br><span class="line">        [<span class="keyword">this</span>.vertices[<span class="number">0</span>], <span class="keyword">this</span>.vertices[<span class="number">1</span>], <span class="keyword">this</span>.vertices[<span class="number">2</span>], <span class="keyword">this</span>.vertices[<span class="number">3</span>]],</span><br><span class="line">        [<span class="keyword">this</span>.vertices[<span class="number">3</span>], <span class="keyword">this</span>.vertices[<span class="number">2</span>], <span class="keyword">this</span>.vertices[<span class="number">5</span>], <span class="keyword">this</span>.vertices[<span class="number">4</span>]],</span><br><span class="line">        [<span class="keyword">this</span>.vertices[<span class="number">4</span>], <span class="keyword">this</span>.vertices[<span class="number">5</span>], <span class="keyword">this</span>.vertices[<span class="number">6</span>], <span class="keyword">this</span>.vertices[<span class="number">7</span>]],</span><br><span class="line">        [<span class="keyword">this</span>.vertices[<span class="number">7</span>], <span class="keyword">this</span>.vertices[<span class="number">6</span>], <span class="keyword">this</span>.vertices[<span class="number">1</span>], <span class="keyword">this</span>.vertices[<span class="number">0</span>]],</span><br><span class="line">        [<span class="keyword">this</span>.vertices[<span class="number">7</span>], <span class="keyword">this</span>.vertices[<span class="number">0</span>], <span class="keyword">this</span>.vertices[<span class="number">3</span>], <span class="keyword">this</span>.vertices[<span class="number">4</span>]],</span><br><span class="line">        [<span class="keyword">this</span>.vertices[<span class="number">1</span>], <span class="keyword">this</span>.vertices[<span class="number">6</span>], <span class="keyword">this</span>.vertices[<span class="number">5</span>], <span class="keyword">this</span>.vertices[<span class="number">2</span>]]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用上面创建的Cube类，我们可以通过指定中心点(center)和边缘长度(size)的方式来创建一个虚拟的立方体。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> cube = <span class="keyword">new</span> Cube(<span class="keyword">new</span> Vertex(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">200</span>);</span><br></pre></td></tr></table></figure><p>Cube类的构造函数通过生成立方体的顶点来确定一个立方体，这些顶点的位置是通过指定中心点位置与立方体大小计算出来的。下面的图示表示得很清楚，我们在下图可以看到这8个顶点的位置。<br><img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1454758168cube.png" alt="立方体顶点图"></p><p>接着，列出每个面。每个面都是一个正方形，因此需要指定四个顶点。在上面的代码中我通过一个数组来表示一个面，如果你有需要的话，你可以创建一个专门的class来表示。</p><p>创建一个面需要四个顶点，但是我们不需要重复的指定它们的位置，它们都保存在 this.vertices[i] 这个对象中，这是非常有用的，但还有另一个原因。</p><p>通常地，JavaScript尝试使用尽可能少的内存。为了实现这个目标，通过函数参数传递对象的时候，这个对象是不会被拷贝或者被存为数组的。对于我们使用的情况，这是一种极好的行为。</p><p>事实上,每一个顶点包含了三个数字(坐标),必要的话我们可以再增加几个方法(method)。如果每个面我们都保存一份copy的顶点值，这样会浪费很多内存。在这里，我们都是使用引用的方式: 每个坐标(以及其他方法)都只存储一次,每个顶点被三个不同的面使用，只需要存储这个顶点的引用而不是把这个顶点都copy出来存储，这样仅仅使用了原来内存的1/3(或者更少)就够了。</p><h3 id="需要三角形吗"><a href="#需要三角形吗" class="headerlink" title="需要三角形吗?"></a>需要三角形吗?</h3><p>如果之前使用过3D技术(比如Blender，webGL等),你可能觉得我们应该使用三角形。但是呢在这篇文章中没有选择使用三角形(注: 确定一个面只需要三个点就可以了)。</p><p>为什么没有选择使用三角形呢，因为这是一篇以介绍为主的文章，在文章中展现的基本形状是立方体。在我们的例子中，使用三角形来显示正方形比其他任何事情都复杂。</p><p>但是如果你想要构建一个更加完整的渲染，你需要知道三角形才是首选，主要原因有两个:</p><ol><li>纹理: 由于一些数学上的原因，在面(faces)上面显示图像(images)需要使用三角形.</li><li>一些奇怪的面: 三个顶点总是在同一个平面上的，然而你也可以添加第四个点，这个点可能就不在那个平面上了，你可以再创建一个面连接这四个点。 在这样的情况下，我们别无选择，只能分割出来两个三角形(就像对折一张纸一样)。但是如果使用三角形的话，你可以很随意的控制和选择从哪里开始分割。</li></ol><h3 id="让多面体动起来"><a href="#让多面体动起来" class="headerlink" title="让多面体动起来"></a>让多面体动起来</h3><p>还有一个存储顶点引用而不是存顶点副本的优势是，假如要修改这个多面体的时候，还能将本来的三个操作简化为了一个操作。(注: 比如保存了三个相同的顶点，如果对这个顶点进行移动，那么需要对这三个点都进行操作才正确，而如果使用引用的方式的话，只需要移动一个点就可以了。)</p><p>为什么呢? 来回顾一下数学课上学的东西.当想要平移一个正方形的时候，实际上你不需要真正的去平移这个正方形，你只需要平移正方形的四个顶点就可以了。</p><p>在这里，也是相同的做法：我们不会去触碰正方体的那些面，而是只需要把想要的操作应用到每个顶点上就可以了。那些面的坐标都是使用引用的方式创建的，只要坐标改变了，那么对应的面也会改变。下面这个实例将展示如何平移创建好的立方体：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; ++i) &#123;</span><br><span class="line">    cube.vertices[i].x += <span class="number">50</span>;</span><br><span class="line">    cube.vertices[i].y += <span class="number">20</span>;</span><br><span class="line">    cube.vertices[i].z += <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="渲染图像"><a href="#渲染图像" class="headerlink" title="渲染图像"></a>渲染图像</h1><p>我们现在知道了如何存储一个3D对象并且知道了如何对它们进行移动。是时候该看见它们了!但是，为了更能明白我们需要做什么，还需要一小点背景知识。</p><h3 id="投影"><a href="#投影" class="headerlink" title="投影"></a>投影</h3><p>目前，已经能够存储3D坐标了。但是，一个屏幕只能展现二维坐标，因此需要有一种方法将3D坐标转化为2D坐标: 这在数学上我们称之为投影(projection)。3D到2D的投影是一个抽象操作，是通过一个叫做虚拟摄像机的东西来完成的。这个相机将3D对象坐标转换为2D的，然后把它们发送到屏幕上面渲染出来。我们假设这个相机在我们3D空间中的原点上面(坐标是(0,0,0)).</p><p>在本文的开头我们讨论过坐标使用x,y,z三个数字来表示。但是要定义一个坐标的话我们需要一个基准: z是不是纵坐标？是向下还是向上？我们并没有一个统一的答案，也没有约定，你可以随意的选择定义。你唯一需要记住的是当你改变3D对象的时候所遵循的规则必须是一致的，公式也会随坐标系不同而改变。在此文中，我选择的基准是： x轴从左往右，y轴从后往前，z轴从下到上。</p><p>现在已经明确该做什么了：使用(x, y, z)表示坐标，为了在屏幕上显示他们，我们需要将它转换成(x, z)的形式。因为屏幕是一个平面，为来能够显示出3D效果。</p><p>这里不仅仅只存在一个投影，更糟糕的是存在无限多不同的投影。在此文中我们可以看到两种不同类型的投影，这两种也是在实践中是最常使用的。</p><h3 id="如何绘制场景"><a href="#如何绘制场景" class="headerlink" title="如何绘制场景"></a>如何绘制场景</h3><p>在展现图形之前，先写一个函数专门用来绘制。这个函数接收一个对象数组(数组中每个对象是一个Cube实例)，第二个参数是canvas的contex对象，其它参数用来让图形被绘制在一个正确的位置上。</p><p>这个对象数组包含多个要被渲染的对象。这些对象必须遵循一点：都有一个faces属性，这个faces属性是个数组，用来表示这个对象的所有面。这些面可以是任何图形(正方形，三角形，甚至是十二边形)，他们是由顶点组成的数组。</p><p>上代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">objects, ctx, dx, dy</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 循环每一个多面体对象。</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, n_obj = objects.length; i&lt; n_obj; ++i) &#123;</span><br><span class="line">        <span class="comment">//循环每个面</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>, n_faces = objects[i].faces.length; j&lt;n_faces; ++j) &#123;</span><br><span class="line">            <span class="comment">//当前面</span></span><br><span class="line">            <span class="keyword">var</span> face = objects[i].faces[j];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 绘制第一个顶点</span></span><br><span class="line">            <span class="keyword">var</span> P = project(face[<span class="number">0</span>]);</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.moveTo(P.x + dx, -P.x + dy);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//绘制其他顶点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> k = <span class="number">1</span>, n_vertices = face.length; k&lt;n_vertices; ++k) &#123;</span><br><span class="line">                P = project(face[k]);</span><br><span class="line">                ctx.linTo(P.x + dx, -P.y + dy);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 关闭路径和面</span></span><br><span class="line">            ctx.closePath();</span><br><span class="line">            ctx.stroke();</span><br><span class="line">            ctx.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要对这个函数说明一下，更确切的说是说明这个project()是什么，那些个dx, dy又是什么。其余的基本没什么，就是循环每个对象然后画出每个面。</p><p>顾名思义，project()函数就是用来将3D坐标转换成2D坐标的投影。它接收一个3D空间顶点，然后返回一个在2D平面上的点。2D平面上的点我们这样定义:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Vertex2D = <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.x = <span class="built_in">parseFloat</span>(x);</span><br><span class="line">    <span class="keyword">this</span>.y = <span class="built_in">parseFloat</span>(y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为了保持传统写法，我将坐标(x, z)重命名了(x, y), (之前定义的3D坐标系统中z轴是纵轴, 而2D坐标中y轴是纵轴)这仅仅是写法问题。如果你想要使用z的话也是可以的。</p><p>具体的project()函数的实现你将会在下一节中看到, 它取决于你选择的投影类型。但是不管是什么类型，而之前编写的render()函数是不会改变的。</p><p>坐标一旦在平面上了，我们就可以把它们绘制在canvas上面，这就是我们想做的。这里有一个小技巧是我们不会真正的绘制由project()函数返回回来的坐标点。</p><p>实际上project()函数返回的是一个虚拟2D平面上的点，它的原点和定义的3D空间中的原点是一样的。但是我想要原点在canvas画布的正中心位置上，那就是为什么要平移坐标了。顶点(0, 0)不在canvas画布的中心,但是(0+dx, 0+dy)在。因此只需要将dx=canvas.width/2,dy=canvas.height/2就可以了。</p><p>最后，最后一个细节是：为什么我们使用-y而不是直接的使用y? 原因在于我们选择的基准是: z轴是从下到上的，在我们的场景中z坐标是向上为正的。但是在canvas中，y轴是向下的，y坐标越往下，值越大。这就是为什么我们要把y坐标取值为z的负值。</p><p>目前render()函数已经很明确了，现在来看看project()函数</p><h3 id="正交视图"><a href="#正交视图" class="headerlink" title="正交视图"></a>正交视图</h3><p>让我们从正交视图开始，这也是最简单的一种视图，他能很好的帮助我们理解。<br>有三个坐标值，但是我们只想要两个，在这种情况下最简单的做法是什么呢？那就移除一个坐标值，在正交投影中就是这样做的。让我们移除表示深度的坐标值y.就像下面这样:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">project</span>(<span class="params">M</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vertex2D(M.x, M.z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>现在你可以测试我们文章中的所有代码了, it works！恭喜你,你已经能在屏幕中绘制一个3D图形了!</p><p>这里有个在线示例, 你可以使用鼠标交互来旋转立方体.</p><p></p><p data-height="300" data-theme-id="0" data-slug-hash="obapXL" data-default-tab="result" data-user="SitePoint" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/obapXL/" target="_blank" rel="noopener">3D Orthographic View</a> by SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><p>有时候正视图就是我们想要的.因为它保留了相似性的优势。但是这不是最自然的视角, 我们的眼睛看物体并不是像那样的，这就是为什么我们会看到第二个投影: 透视图</p><h3 id="透视"><a href="#透视" class="headerlink" title="透视"></a>透视</h3><p>透视图要比正交投影稍微复杂一点，我们需要做一些计算，当然这些计算并不是那么复杂的，你只需要知道一点就够了: 如何使用<a href="https://en.wikipedia.org/wiki/Intercept_theorem" target="_blank" rel="noopener">截线定理</a></p><p>要理解为什么，下面用一个图示来表示正交投影，用正交的方式将我们的点投影到一个平面上。<br><img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1454758163orthographic-view.png" alt="正交投影"></p><p>但是在现实生活中，我们的眼睛看物体更像下面这样:<br><img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1454758150perspective-view.png" alt="透视"></p><p>两个基本步骤</p><ol><li>连接原来的顶点和相机的原点形成一条线.</li><li>投影就是这条线与平面的交点.</li></ol><p>与正交投影相反的是, 定平面的位置是非常重要的:如果你这个平面放在远离相机很远的位置和你放在很近的位置所得到的效果是不同的。在这里我们把它放在离相机距离为d的位置.<br>在3D空间中,从顶点坐标M(x, y, z)开始,我们要计算在平面上的投影坐标M’(x’, y’);<br><img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1454758154perspective-projection.png" alt="坐标投影"></p><p>想一想应该如何计算这些坐标.让我们换一个角度来看,还是原来的图,但是现在从上面看。</p><p><img src="http://dab1nmslvvntp.cloudfront.net/wp-content/uploads/2016/02/1454758159perspective-projection-top.png" alt="坐标投影,从上看"></p><p>可以看到一个能使用截线定理的构造，在图示中，已经知道了一下值:x, y以及d. 想要计算x’,因此使用截线定理得:x’ = d / y * x.</p><p>现在如果你从一个侧面看同一个场景, 你会得到相似的图示.接着你可以得到z’的值.<br>z’ = d / y * z.</p><p>到这里就可以写出使用透视图的 project()函数了。代码如下:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">project</span>(<span class="params">M</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 相机和平面的距离</span></span><br><span class="line">    <span class="keyword">var</span> d = <span class="number">200</span>;</span><br><span class="line">    <span class="keyword">var</span> r = d / M.y; <span class="comment">// 注: 相似比</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Vertex2D(r * M.x, r * M.z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是在线示例:</p><p></p><p data-height="300" data-theme-id="0" data-slug-hash="VeEyvm" data-default-tab="result" data-user="SitePoint" class="codepen">See the Pen <a href="http://codepen.io/SitePoint/pen/VeEyvm/" target="_blank" rel="noopener">3D Perspective View</a> by SitePoint (<a href="http://codepen.io/SitePoint" target="_blank" rel="noopener">@SitePoint</a>) on <a href="http://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p><p></p><script async src="//assets.codepen.io/assets/embed/ei.js"></script><h1 id="结束语-不想译了…"><a href="#结束语-不想译了…" class="headerlink" title="结束语(不想译了….)"></a>结束语(不想译了….)</h1><p>Our (very basic) 3D engine is now ready to display any 3D shape we want. There are some things you could do to enhance it. For example, we see every face of our shapes, even the ones at the back. To hide them, you could implement <a href="https://en.wikipedia.org/wiki/Back-face_culling" target="_blank" rel="noopener">back-face culling</a>.</p><p>Also, we didn’t talk about textures. Here, all our shapes share the same color. You can change that by, for example, adding a color property in your objects, to know how to draw them. You can even choose one color per face without changing a lot of things. You can also try to display images on the faces. However, it’s more difficult and detailing how to do such a thing would take a whole article.</p><p>Other things can be changed. We placed the camera at the origin of the space, but you can move it (a change of basis will be needed before projecting the vertices). Also, vertices placed behind the camera are here drawn, and that’s not a thing we want. A <a href="https://en.wikipedia.org/wiki/Clipping_path" target="_blank" rel="noopener">clipping plane</a> can fix that (easy to understand, less easy to implement).</p><p>As you see, the 3D engine we built here is far to be complete, and it’s also my own interpretation. You can add your own touch with other classes: for example, Three.js uses a dedicated class to manage the camera and the projection. Also, we used basic math to store the coordinates, but if you want to create a more complex application and if you need, for instance, to rotate a lot of vertices during a frame, you won’t have a smooth experience. To optimize it, you will need some more complex math: <a href="https://en.wikipedia.org/wiki/Homogeneous_coordinates" target="_blank" rel="noopener">homogeneous coordinates</a> (projective geometry) and <a href="https://en.wikipedia.org/wiki/Quaternion" target="_blank" rel="noopener">quaternions</a>.</p><p>If you have ideas for your own improvements to the engine, or have built something cool based on this code, please let me know in the comments below!</p><p>英语渣作死第一次翻译…</p><p><a href="http://www.sitepoint.com/building-3d-engine-javascript/" target="_blank" rel="noopener">原文地址:http://www.sitepoint.com/building-3d-engine-javascript/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在web页面中展示图片或者其他平面图形是很容易的。但是当涉及到展示3D图形时就显得不是那么的容易了，因为3D几何体比2D的更为复杂。要做到这一点的话，你可以使用专门的技术和库比如&lt;a href=&quot;https://en.wikipedia.org/wiki/WebGL&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;webGL&lt;/a&gt;和&lt;a href=&quot;http://threejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;three.js&lt;/a&gt;来实现。&lt;br&gt;当然，如果你只是想显示一些基本的形状(比如立方体)，这些技术并不是必须的。并且，这些技术和库并不能帮助你理解它们是如何生效的以及我们应该怎样在屏幕上绘制3D形状。&lt;br&gt;本教程的目的是教我们在web中并且不使用webGL技术应该如何够制作一个简单的3D引擎。首先，我们看看如何来存储3D形状，然后，我们分别在两种视图中如何来显示这些形状。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://lyan.me/tags/javascript/"/>
    
      <category term="canvas" scheme="http://lyan.me/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>web中ajax操作的统一处理</title>
    <link href="http://lyan.me/2016/01/29/web%E4%B8%ADajax%E6%93%8D%E4%BD%9C%E7%9A%84%E7%BB%9F%E4%B8%80%E5%A4%84%E7%90%86/"/>
    <id>http://lyan.me/2016/01/29/web中ajax操作的统一处理/</id>
    <published>2016-01-29T07:38:35.000Z</published>
    <updated>2022-09-24T01:55:55.154Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>在web开发中，使用ajax请求服务器资源已经是非常普遍的做法了。也许有这样的需求, 在某个系统中的所有访问都是需要进行权限控制的，服务端判断用户权限，如果没有对应资源的访问权限的话那么返回一个约定好的状态码，前端拿到这个状态码进行相应的UI提示。可是，在前端中也许有非常多的这样的请求，没次请求过后都要判断一下状态码然后给出相应的提示，这样会写非常多的重复代码，当改了提示消息的时候就需要到每个ajax回调里面去改，非常不方便。因此我们需要一个统一的方式来接管ajax请求，也就是在执行业务方写的回调的时候，先执行需要验证的前置条件(前面说的状态码).下面就在使用jQuery的时候我们如何来拦截。</p></blockquote><a id="more"></a><h2 id="方式1-拦截-ajax方法"><a href="#方式1-拦截-ajax方法" class="headerlink" title="方式1, 拦截$.ajax方法"></a>方式1, 拦截$.ajax方法</h2><p>第一想到的是改造jQuery的ajax方法，在回调函数里面加入统一处理的逻辑。但是这样的话就是完全覆盖了$.ajax方法，代码写起来倒是简单.一步一步实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 首先保存原有的$.ajax方法</span></span><br><span class="line"><span class="keyword">var</span> ajax = $.ajax,</span><br><span class="line">    noop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写$.ajax</span></span><br><span class="line"><span class="comment">//保持和原生的$.ajax方法参数一致</span></span><br><span class="line">$.ajax = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存业务代码中传递的成功回调和失败回调</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">var</span> func = &#123;</span><br><span class="line">        success:  <span class="string">'function'</span> === <span class="keyword">typeof</span> options.success ? options.success : noop,</span><br><span class="line">        error: <span class="string">'function'</span> === <span class="keyword">typeof</span> option.error ? options.error : noop</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> _ops = $.extend(&#123;&#125;, option, &#123;</span><br><span class="line">            success: <span class="function"><span class="keyword">function</span>(<span class="params">data, state, xhr</span>) </span>&#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 统一处理的逻辑, 例如</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="keyword">if</span> (+data.status !== <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">/**</span></span><br><span class="line"><span class="comment">                     * code here</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 调用业务端的回调。</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                func.success(data, state, xhr);</span><br><span class="line">            &#125;,</span><br><span class="line">            error: <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//类似success里面的代码</span></span><br><span class="line">                func.error(e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ajax.call($, _ops);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，基于上面的代码可以做很多的通用性处理，比如在beforeSend的时候设置统一的header等操作，都可以通过重写回调的方式来实现。</p><h2 id="方式2-自己封装一个统一的ajax工具供业务里面使用"><a href="#方式2-自己封装一个统一的ajax工具供业务里面使用" class="headerlink" title="方式2,自己封装一个统一的ajax工具供业务里面使用"></a>方式2,自己封装一个统一的ajax工具供业务里面使用</h2><p>比如自己写一个AjaxUtil.js暴露给业务使用, 在这里面进行统一处理. 其实也类似于方式1， 只是这样没有污染jquery 原有的ajax方法.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在web开发中，使用ajax请求服务器资源已经是非常普遍的做法了。也许有这样的需求, 在某个系统中的所有访问都是需要进行权限控制的，服务端判断用户权限，如果没有对应资源的访问权限的话那么返回一个约定好的状态码，前端拿到这个状态码进行相应的UI提示。可是，在前端中也许有非常多的这样的请求，没次请求过后都要判断一下状态码然后给出相应的提示，这样会写非常多的重复代码，当改了提示消息的时候就需要到每个ajax回调里面去改，非常不方便。因此我们需要一个统一的方式来接管ajax请求，也就是在执行业务方写的回调的时候，先执行需要验证的前置条件(前面说的状态码).下面就在使用jQuery的时候我们如何来拦截。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://lyan.me/tags/javascript/"/>
    
      <category term="jQuery" scheme="http://lyan.me/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>javascript操作DOM中遇到的一些坑</title>
    <link href="http://lyan.me/2016/01/12/javascript%E6%93%8D%E4%BD%9CDOM%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://lyan.me/2016/01/12/javascript操作DOM中遇到的一些坑/</id>
    <published>2016-01-12T10:18:14.000Z</published>
    <updated>2022-09-24T01:55:55.152Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>来源知乎：<a href="https://www.zhihu.com/question/29072028/answer/43095799" target="_blank" rel="noopener">https://www.zhihu.com/question/29072028/answer/43095799</a><br>我们都知道 JavaScript 有 getElementById() 等方法查找对应的元素，但浏览器底层到底是怎么做的？是一个个遍历对象然后对比相应的 id 或者其他属性来对比区分？</p></blockquote><h1 id="一-属性相关"><a href="#一-属性相关" class="headerlink" title="一.属性相关"></a>一.属性相关</h1><p>我们通常把特征(attribute)和属性(property)统称为属性，但是他们确实是不同的概念，<br>特征(attribute)会表现在HTML文本中，对特征的修改一定会表现在元素的outerHTML中，并且特征只存在于元素节点中；<br>属性(property)是对于JS对象进行修改，除了浏览器内置的部分特征外，其它的属性操作并不会影响HTML文本。<br><a id="more"></a></p><ol><li>IE6/7不区分属性和特征<br>其它浏览器会区分属性和特征，而IE67并不会区分它们，在IE67下我们只能用属性名来删除特征，虽然这两个名字很多时候一样，但总会有不一样的地方。</li><li>IE6/7不能通过getAttribute/setAttribute来操作值不为字符串的特征<br>在现代浏览器中getAttribute一定会返回HTML中对应的字符串，而IE67返回的结果不可预知，因此在IE67下，我们要用AttributeNode来操作属性。</li><li>IE6/7/8不能通过style属性来获取CSS文本<br>这个问题应当是IE6/7不区分属性和特征的后遗症，在获取style这个属性的时候，使用elem.style.cssText就好了。</li><li>IE6/7会解析相对URL成为绝对URL<br>这个问题甚至导致了IE6/7下空的src属性会产生重复的请求，可以使用getAttribute(‘href/src’, 4)。</li><li>元素特征的默认行为不同<br>这一类的BUG会比较多，比如在一些旧的webkit浏览器里面，checkbox/radio 的默认值为””，而不是on。在一些旧的webkit浏览器select的第一个元素不会被选中。</li></ol><h1 id="二-样式操作"><a href="#二-样式操作" class="headerlink" title="二.样式操作"></a>二.样式操作</h1><p>通常情况下，样式包括获取和设置行内样式以及获取元素的计算出的样式</p><ol><li>IE支持background-position-x/y而其它浏览器不支持<br>background-position-x/y可以用来方便的渐变一个图片的位置，不支持的情况下我们可以考虑使用解析background-position属性的来处理。</li><li>IE6/7不支持opacity属性<br>可以通过alpha滤镜来实现相同的效果，不过要记得触发元素的haslayout。</li><li>IE6/7/8会错误的让clone产生的节点继承一些属性<br>比如background，修改一个两个同时会改。</li><li>不同的获取计算出样式的方式<br>IE6/7/8使用elem.currentStyle而其它浏览器要用window.getComputedStyle函数。<br>5.不同的像素化方式<br>像素化指的是将单位不是像素的距离转换成像素，以方便进行计算。严格的说这不是一个兼容性问题，但可能全用到。在IE6/7/8中，我们可以使用elem.runtimeStyle配合pixelLeft来进行处理。<br>而现代浏览器可以使用width属性处理。</li><li>一些获取CSS时的BUG行为<br>在Webkti核心的浏览器中，margin-right经常会出错。</li></ol><h1 id="三-查询操作"><a href="#三-查询操作" class="headerlink" title="三.查询操作"></a>三.查询操作</h1><p>查询通过指的是通过一些特征字符串来找到一组元素，或者判断元素是不是满足字符串。</p><ol><li>IE6/7不区分id和name<br>在IE6/7下使用getElementById和getElementsByName时会同时返回id或name与给定值相同的元素。由于name通常由后端约定，因此我们在写JS时，应保证id不与name重复。</li><li>IE6/7不支持getElementsByClassName和querySelectorAll<br>这两个函数从IE8开始支持的，因此在IE6/7下，我们实际可以用的只有getElementByTagName。</li><li>IE6/7不支持getElementsByTagName(‘<em>‘)会返回非元素节点<br>要么不用</em>，要么自己写个函数过滤一下。</li><li>IE8下querySelectorAll对属性选择器不友好<br>几乎所有浏览器预定义的属性都有了问题，尽量使用自定义属性或者不用属性选择器。</li><li>IE8下querySelectorAll不支持伪类<br>有时候伪类是很好用，IE8并不支持，jquery提供的:first、:last、:even、:odd、:eq、:nth、:lt、:gt并不是伪类，我们在任何时间都不要使用它们。</li><li>IE9的matches函数不能处理不在DOM树上的元素<br>只要元素不在dom树上，一定会返回false，实在不行把元素丢在body里面匹配完了再删掉吧，当然了我们也可以自己写匹配函数以避免回流。</li></ol><h1 id="四-事件操作"><a href="#四-事件操作" class="headerlink" title="四.事件操作"></a>四.事件操作</h1><p>通常一问大家JS的兼容性，第一反应都会是attachEvent和addEventListener，但是关于这两个函数的区别，也还是有很多的细节。</p><ol><li>事件作用对象不同<br>addEventListener为事件冒泡到的当前对象，而attachEvent是window。<br>. 事件参数对象不同<br>一定要注意，attachEvent绑定的函数有参数e，不要再写e = e || event了，不过两者的参数属性有很多的差别，如button还是witch，支持不支持pageY等等。</li><li>万恶的滚轮事件<br>滚轮事件的支持可谓是乱七八糟，规律如下：<br>IE6-11 chrome mousewheel wheelDetla 下 -120 上 120<br>firefox DOMMouseScroll detail 下3 上-3<br>firefox wheel detlaY 下3 上-3<br>IE9-11 wheel deltaY 下40 上-40<br>chrome wheel deltaY 下100 上-100</li><li>三大不冒泡事件<br>所有浏览器的focus/blur事件都不冒泡，万幸的是大部分浏览器支持focusin/focusout事件，不过可恶的firefox连这个都不支持。<br>IE678下submit事件不冒泡。<br>IE678下change事件要等到blur时才触发。<br>而我们没有什么有效的手段去解决这三个问题，只能通过模拟触发的方式来处理。</li><li>a.click()<br>这方法在很多浏览器下都不安全，一执行哪怕阻止了默认行为，还是会造成页面跳转。</li></ol><h1 id="五-节点操作"><a href="#五-节点操作" class="headerlink" title="五.节点操作"></a>五.节点操作</h1><p>节点操作通常指的是复制、生成一个节点或者移动节点的位置。<br>1.. innerHTML<br>IE6/7/8使用innerHTML时必须在前面有一个文本节点，不然会造成很多标签丢失。另外很多情况下使用innerHTML会造成defaultValue属性出错。</p><ol start="2"><li>无用的tbody<br>IE6/7/8会给空的table自动加一个空的tbody</li><li>cloneNode时会复制attachEvent的事件<br>并且除非我们记录了我们绑定的事件，否则我们没办法解绑他们。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;来源知乎：&lt;a href=&quot;https://www.zhihu.com/question/29072028/answer/43095799&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.zhihu.com/question/29072028/answer/43095799&lt;/a&gt;&lt;br&gt;我们都知道 JavaScript 有 getElementById() 等方法查找对应的元素，但浏览器底层到底是怎么做的？是一个个遍历对象然后对比相应的 id 或者其他属性来对比区分？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;一-属性相关&quot;&gt;&lt;a href=&quot;#一-属性相关&quot; class=&quot;headerlink&quot; title=&quot;一.属性相关&quot;&gt;&lt;/a&gt;一.属性相关&lt;/h1&gt;&lt;p&gt;我们通常把特征(attribute)和属性(property)统称为属性，但是他们确实是不同的概念，&lt;br&gt;特征(attribute)会表现在HTML文本中，对特征的修改一定会表现在元素的outerHTML中，并且特征只存在于元素节点中；&lt;br&gt;属性(property)是对于JS对象进行修改，除了浏览器内置的部分特征外，其它的属性操作并不会影响HTML文本。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://lyan.me/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>2015这一年</title>
    <link href="http://lyan.me/2015/12/31/2015%E8%BF%99%E4%B8%80%E5%B9%B4/"/>
    <id>http://lyan.me/2015/12/31/2015这一年/</id>
    <published>2015-12-31T01:14:45.000Z</published>
    <updated>2022-09-24T01:55:55.151Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>转眼间，一年的悠悠岁月已如同手中紧抓的沙子，无声无息的流失。然而，沙子流失，可以再抓一把；花儿凋零，可以等到来年春天重绽芳颜；岁月流逝，却永远无法回头再来。</p></blockquote><p>我都不知道该如何回忆这一年，发生了很多事情，大学毕业、第一份工作、女朋友、北漂……。还记得2015年的元旦，那个时候正在成都的一家创业公司上班，公司就只有8个人，还包括两个老板。即使这样，但工作氛围倒也比较可以的，老板对我们员工都还好，平时下班/休息的时候我们还一起打桌上足球很是欢乐。但是越到后来我越是觉得待不下去，那个时候还没毕业，总觉得自己还能找一份更好的工作。临近毕业了，这种想法更是强烈。有一次在某技术群里面聊天，偶然看到司徒正美发的一个关于Qunar网校园招聘的信息，于是就去试着投了简历。后来出乎意料的收到了笔试通知。再后来也就就接到面试邀请了，本来也没抱多大希望的，面试那天表现也不是很好，晚上回学校的时候天上下着雨，也是急匆匆的往回赶，然后，手机丢了……（这样写起来似乎还有因果关系呢），后来我从那个创业公司辞职了，有一种解脱的感觉。</p><a id="more"></a><p>大约过了一个月过后，我收到了Qunar网的offer，当时心情还是挺激动的，终于有了一份正式的工作，就等着毕业过后去公司报到。</p><p>接下来就是全力准备毕业论文答辩了，写论文这个过程很痛苦，大概改了11个版本吧，现在看到这些草稿便不由的发笑。临近答辩，心里还是挺忐忑的，毕竟上台面对那么多人并不是我的强项。可是有什么办法呢，为了顺利拿到毕业证，自己必须勇敢一点。</p><p>改论文改得很烦，很想放松一下。一天和高中关系很好的朋友Y聊天，得知Y来成都玩了，一想都感觉好多年没有见到过了，于是便一起约好出去走走。那一天玩的很开心，总之就是不停的吃吃吃，下午一起去看了场电影（何以笙箫默），这也是我和她一起看过的唯一一部电影。这一天很美好还真是达到了放松的目的呢。</p><p>回学校继续改论文，终于到了论文答辩的日子（6月7号），那一天早早的把论文拿去文印店装订好，和室友们一同去答辩的教室。自告奋勇的申请了个当场的答辩小秘书来当（就是帮助答辩老师记录问题与学生的答案），自己的答辩很顺利的就通过了，也算是完成了大学最后的一门课程，如释负重，终于不用担心自己会延迟毕业了。答辩结束后，我们全学院的同学一起去西大门外面聚餐，也就是毕业饭，那一天晚上喝了好多酒，说了好多话，甚至和几乎从来没有说过话的同学也相谈甚欢，大概是大家都清楚这一别又不知道此生还能不能再见，人生中能有几个四年！</p><p>第二天我便回了老家，帮助家里干了几天农活儿。现在想起来还是家乡好，山清水秀空气好，再看看北京…哎，有什么办法呢，需要生活。过了几天后，从老家返回成都的途中去了一趟曾经的高中。在那个学校也有好多的记忆，曾经一度是网瘾少年，后来幡然悔悟步入正轨。看到学校已经变化得太多，在我读高一那个时候就说要建的运动场现在终于建成，还真想到那运动场上去跑两圈，可惜天气太热便匆匆的到教学楼下面的座椅去乘凉了。高三教室外面的那个走廊还是原来的样子，被无数的藤蔓缠绕着，无意间掉落几缕阳光，洒下一地的暖意。正值下课铃响了，同学们还是和我们那个时候一样，飞奔出教室冲向食堂，可已不再是那些熟悉的面孔了，真有种物是人非的感觉。那一天本来还想约Y到高中游玩一下的，可是她已经不在家而去成都游玩了。后来我就到我叔叔家待了一天，叔叔的女儿，也就是我的堂妹，都已经长好高了，她都不认识我了。上高中的时候经常去叔叔家玩，那个时候她都还好小。休息了一晚，第二天便回到了成都。</p><p>回到我在成都上班时租的那个小屋子里，然后和Y约好了准备一起去她的学校游玩。她上学的地方在南充，已经帮我买好了动车票。突然电话铃响了，是我一老乡T打来的，他说他的爸爸离世了，让我下午去接他然后晚上陪他一起回老家，我答应了。T买了下午2点从青岛到成都的机票回来，晚上我和另一个哥们儿L租了个车把T送回老家，一路奔波，当天晚上我和L又返回到成都，再次抵达成都的时候，已经是早上8点多了。和L匆匆道别，然后买了张去南充的动车票当天就去了Y的学校。Y在车站来接的我，去吃了美味的大虾，虽然好累，但是和Y在一起很开心。后来我们一起玩了很多天，直到Y到机场送我去北京，又是离别，我真的好不舍，”说再见，何时才能再见，当我拉下窗帘，你出现在我的美梦里面”。后来Y也漂洋过海，远去他乡，独自一人在外工作。和Y在一起的那些日子，大概是我今年最开心的一段时光了吧。有一首歌是我此刻对Y的心情</p><audio style="width:100%" controls="controls" src="http://sc1.111ttt.com:8282/2015/5/12m/05/105051259240.m4a"></audio><p>来到北京，搬进自己和同事合租的出租房里，屋子不怎么样，租金倒是挺高的，突然发现北京的消费水平还真是高。第二天和同事一起去宜家买了一些厨卫家具等用品，郁闷的是那天在宜家把雨伞搞丢了，虽然那个雨伞不怎么值钱，可是它却陪伴了我好几年了，后来我又回去找了一遍还是没有找到。似乎一切都安顿好了，就等着入职了，7月2号如期而至，我一个人早早的去了入职的地方—-西海国际，没有认识的人，一切都是好陌生，不过后来遇到了一个四川老乡，心情也是很好的。我们新人入职过后紧接着就是培训，那么多名校毕业的同事，自己感觉压力还是好大呢，我们培训的地方在五道口清华同方大厦，那边的区位非常好，但似乎就是上下班高分期车流非常拥堵，不过我到是没有感受过，我每天乘地铁上下班，从八号线转到15号线，因为每天下班都比较晚，所以人都不是很多，好多时候都还有座位可以座。五道口那边的商业比较繁华，闲下来的时候约三五同事一起去U-CENTER吃一顿烤鱼也是极好的。培训期间我们换过好几名老师，都是教授我们不同知识的人，从环境搭建到业务流程，每一个老师都讲得很好很用心。特别是培训CSS的课程的时候，遇到了业界比较出名的css大牛瑶姐，瑶姐讲课讲得很好，我每次都很认真的听课，回答问题，完成学习任务。当时我们吃中午饭去的最多的地方就是清华同方的那个“天坑”下面，我很喜欢吃里面的有一家江西瓦罐汤，每次还要加上一个烤鸡腿，然后把汤都喝完才收场。 其次就是去那个沙县小吃了，想吐槽的是那一家沙县小吃的分量真的好少，点一个xx饭，饭倒是挺多的，但是那个菜就只有一丁点!,根本不够下翻好伐!. 我好多时候都是点那个乌鸡汤饭，虽然量少，但味道还是比较好的。</p><p>在五道口待了近2个月，终于到了开始做结业项目的时候了。我和另外几个后端的同学被分到一个CRM的项目，需要去东升科技园常驻，我们就直接去东升了。几位小伙伴都很给力，大家积极的分析需求，与PM 沟通，努力解决技术问题。东升的环境非常好，有健身房、乒乓球台，浴室等设施，好喜欢去健身房的按摩椅上面按摩。刚去东升的时候都没有工位了，我们团队5个人挤在3张桌子拼起来的桌子上办公，地上布满了各种线路，不过还好，至少没有影响到正常干活儿。项目大概做了两周就到结业答辩了， 我的答辩老师是机票事业部一个很牛的前端，问了我一些比较基础的问题，我回答的还算一般吧，只是他说深度不够，还给我讲解了实际项目开发中应该注意的一些问题，感谢那位老师给了我非常好的建议。结业项目完成过后就把我们分到业务线去了，不过那个时候还没有正式去业务线，我们等到国庆节过后才到业务线的。一到业务线，又是一套新的环境，新的同事，要适应的东西挺多的。现在每天都是工作，吃饭，睡觉，平淡无奇，但每天最期待的，就是下班过后能与Y打一通电话，因为国际长途很贵，所以我们一直使用QQ的通话功能，偶尔也开一下视频。 </p><p>回忆太多，很容易伤感。还有好多没写，不结尾，元旦快乐！</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转眼间，一年的悠悠岁月已如同手中紧抓的沙子，无声无息的流失。然而，沙子流失，可以再抓一把；花儿凋零，可以等到来年春天重绽芳颜；岁月流逝，却永远无法回头再来。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我都不知道该如何回忆这一年，发生了很多事情，大学毕业、第一份工作、女朋友、北漂……。还记得2015年的元旦，那个时候正在成都的一家创业公司上班，公司就只有8个人，还包括两个老板。即使这样，但工作氛围倒也比较可以的，老板对我们员工都还好，平时下班/休息的时候我们还一起打桌上足球很是欢乐。但是越到后来我越是觉得待不下去，那个时候还没毕业，总觉得自己还能找一份更好的工作。临近毕业了，这种想法更是强烈。有一次在某技术群里面聊天，偶然看到司徒正美发的一个关于Qunar网校园招聘的信息，于是就去试着投了简历。后来出乎意料的收到了笔试通知。再后来也就就接到面试邀请了，本来也没抱多大希望的，面试那天表现也不是很好，晚上回学校的时候天上下着雨，也是急匆匆的往回赶，然后，手机丢了……（这样写起来似乎还有因果关系呢），后来我从那个创业公司辞职了，有一种解脱的感觉。&lt;/p&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://lyan.me/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用React.js创建一个简单的时钟组件</title>
    <link href="http://lyan.me/2015/12/05/%E4%BD%BF%E7%94%A8React-js%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E6%97%B6%E9%92%9F%E7%BB%84%E4%BB%B6/"/>
    <id>http://lyan.me/2015/12/05/使用React-js创建一个简单的时钟组件/</id>
    <published>2015-12-05T06:24:26.000Z</published>
    <updated>2022-09-24T01:55:55.154Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚学习ReactJs不久, 对React中提到的一些概念比较喜欢，比如虚拟Dom，组件化等。</p><h2 id="Reactjs-简单介绍"><a href="#Reactjs-简单介绍" class="headerlink" title="Reactjs 简单介绍"></a>Reactjs 简单介绍</h2><p>它是facebook 开发的一个框架，现在facebook的 Instagram 网站就是用它来做的。 国内也有好些企业在用，比如teambition 的 简聊。<br>React 通常和其他的 JavaScript 框架同时被提及，比如很多时候大家使用React和angular相比。Angular是一个完整的框架（它包括一个 view 层, 有数据层，ajax功能，Promise等），但React 并没有,它仅仅是view层，也就是仅仅根据自身的某些状态不同来更新出不同的html结构。<br>React实现了单向响应的数据流，比传统数据绑定更加简单，也就和平常我们讨论的MVVM不一样，它仅仅是通过数据的变化来反应到view上面。<br>所谓组件，即封装起来的具有独立功能的UI部件，这是React比较推崇的。，将UI上每一个功能相对独立的模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成大的组件，最终完成整体UI的构建。React为了更高超的性能，自己实现了一个虚拟DOM，而不是在第一时间直接改变真是DOM状态。</p><a id="more"></a><h2 id="实现一个时钟组件"><a href="#实现一个时钟组件" class="headerlink" title="实现一个时钟组件"></a>实现一个时钟组件</h2><p>1.首先说一下功能，很简单，就是咱们平常看到的时钟一样，有时分秒三个指针, 指示当前系统的时间。像这样: <img src="/demo/react-clock/clock.png" alt="时钟"></p><p>2.捋一捋思路:大概就是设置一个定时器,每隔一秒钟获取一下当前系统时间, 计算出对应的时分秒，然后使用得到的时分秒分别乘以对应的角度就得到了指针当前应该旋转在表盘的哪个角度了。通过设置指针的transform:rotate(xdeg)来实现旋转。<br>首先需要下载Reactjs 和 react-dom 到本地(我使用的版本是0.14.3), 为了方便，我直接把jsx代码写在了script标签中,这样就还需要引入一个解析jsx代码的插件叫JSXTransformer.js。当然还有一些js样式就不写出来了，文末有demo可以看到所有代码。<br>结构如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/react/dist/react.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../node_modules/react-dom/dist/react-dom.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"../vendor/JSXTransformer.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/jsx"</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">// code here</span></span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于在代码中我们会多次用到获取系统时间,然后计算出时分秒，所以我把获取时间的功能抽离出来单独一个方法， 该方法返回一个对象包含了当前系统的时分秒信息。在设置初始state的时候我们使用了getNow方法来显示初始时间。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Clock组件 --&gt;</span><br><span class="line"> <span class="keyword">var</span> Clock = React.createClass(&#123;</span><br><span class="line">    getNow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            hour: now.getHours(),</span><br><span class="line">            min: now.getMinutes(),</span><br><span class="line">            sec: now.getSeconds(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">this</span>.getNow();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            secAngle: now.sec * <span class="number">6</span>,</span><br><span class="line">            minAngle: now.min * <span class="number">6</span>,</span><br><span class="line">            hourAngle: now.hour * <span class="number">30</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">    其他代码</span><br><span class="line">    ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>接下来就是动态的计算时间了，我们把这部分代码写在组件的componentDidMount 事件里，因为我们会用到setInterval, 了解过React应该知道这个事件在组件整个生命周期里面只会触发一次。一些异步操作(特别是与DOM相关)都应该写在这里面来。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setState(&#123;</span><br><span class="line">    secAngle: now.sec * <span class="number">6</span>,</span><br><span class="line">    minAngle: now.min * <span class="number">6</span>,</span><br><span class="line">    hourAngle: now.hour * <span class="number">30</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>最终代码:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">var</span> Clock = React.createClass(&#123;</span><br><span class="line">    getNow: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            hour: now.getHours(),</span><br><span class="line">            min: now.getMinutes(),</span><br><span class="line">            sec: now.getSeconds(),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getInitialState: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">this</span>.getNow();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            secAngle: now.sec * <span class="number">6</span>,</span><br><span class="line">            minAngle: now.min * <span class="number">6</span>,</span><br><span class="line">            hourAngle: now.hour * <span class="number">30</span></span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>._timer  = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> now = <span class="keyword">this</span>.getNow();</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                secAngle: now.sec * <span class="number">6</span>,</span><br><span class="line">                minAngle: now.min * <span class="number">6</span>,</span><br><span class="line">                hourAngle: now.hour * <span class="number">30</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;.bind(<span class="keyword">this</span>), <span class="number">1000</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div className=<span class="string">"clock-box"</span>&gt;</span><br><span class="line">                &lt;span className=<span class="string">"sec-pointer"</span> style=&#123;&#123;<span class="attr">transform</span>: <span class="string">'rotate('</span> + <span class="keyword">this</span>.state.secAngle + <span class="string">'deg)'</span>&#125;&#125;&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                &lt;span className="hour-pointer" style=&#123;&#123;transform: 'rotate(' + this.state.hourAngle + 'deg)'&#125;&#125;&gt;&lt;/</span>span&gt;</span><br><span class="line">                &lt;span className=<span class="string">"min-pointer"</span> style=&#123;&#123;<span class="attr">transform</span>: <span class="string">'rotate('</span> + <span class="keyword">this</span>.state.minAngle + <span class="string">'deg)'</span>&#125;&#125;&gt;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;,</span><br><span class="line">    componentWillUnmount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        clearInterval(<span class="keyword">this</span>._timer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Clock/&gt;,</span><br><span class="line">    <span class="built_in">document</span>.querySelector(<span class="string">'.container'</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p><p><a href="/demo/react-clock/">完整demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚学习ReactJs不久, 对React中提到的一些概念比较喜欢，比如虚拟Dom，组件化等。&lt;/p&gt;
&lt;h2 id=&quot;Reactjs-简单介绍&quot;&gt;&lt;a href=&quot;#Reactjs-简单介绍&quot; class=&quot;headerlink&quot; title=&quot;Reactjs 简单介绍&quot;&gt;&lt;/a&gt;Reactjs 简单介绍&lt;/h2&gt;&lt;p&gt;它是facebook 开发的一个框架，现在facebook的 Instagram 网站就是用它来做的。 国内也有好些企业在用，比如teambition 的 简聊。&lt;br&gt;React 通常和其他的 JavaScript 框架同时被提及，比如很多时候大家使用React和angular相比。Angular是一个完整的框架（它包括一个 view 层, 有数据层，ajax功能，Promise等），但React 并没有,它仅仅是view层，也就是仅仅根据自身的某些状态不同来更新出不同的html结构。&lt;br&gt;React实现了单向响应的数据流，比传统数据绑定更加简单，也就和平常我们讨论的MVVM不一样，它仅仅是通过数据的变化来反应到view上面。&lt;br&gt;所谓组件，即封装起来的具有独立功能的UI部件，这是React比较推崇的。，将UI上每一个功能相对独立的模块定义成组件，然后将小的组件通过组合或者嵌套的方式构成大的组件，最终完成整体UI的构建。React为了更高超的性能，自己实现了一个虚拟DOM，而不是在第一时间直接改变真是DOM状态。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://lyan.me/tags/javascript/"/>
    
      <category term="React.js" scheme="http://lyan.me/tags/React-js/"/>
    
  </entry>
  
</feed>
